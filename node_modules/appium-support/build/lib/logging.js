"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.patchLogger = patchLogger;
exports.getLogger = getLogger;
exports.default = exports.log = void 0;

require("source-map-support/register");

var _npmlog = _interopRequireDefault(require("npmlog"));

var _lodash = _interopRequireDefault(require("lodash"));

const NPM_LEVELS = ['silly', 'verbose', 'debug', 'info', 'http', 'warn', 'error'];
const MAX_LOG_RECORDS_COUNT = 3000;
let mockLog = {};

for (let level of NPM_LEVELS) {
  mockLog[level] = () => {};
}

function patchLogger(logger) {
  if (!logger.debug) {
    logger.addLevel('debug', 1000, {
      fg: 'blue',
      bg: 'black'
    }, 'dbug');
  }
}

function _getLogger() {
  const testingMode = parseInt(process.env._TESTING, 10) === 1;
  const forceLogMode = parseInt(process.env._FORCE_LOGS, 10) === 1;
  const usingGlobalLog = !!global._global_npmlog;
  let logger;

  if (testingMode && !forceLogMode) {
    logger = mockLog;
  } else {
    logger = global._global_npmlog || _npmlog.default;
    logger.maxRecordSize = MAX_LOG_RECORDS_COUNT;
  }

  patchLogger(logger);
  return [logger, usingGlobalLog];
}

function getLogger(prefix = null) {
  let [logger, usingGlobalLog] = _getLogger();

  let wrappedLogger = {
    unwrap: () => logger
  };
  Object.defineProperty(wrappedLogger, 'level', {
    get: () => {
      return logger.level;
    },
    set: newValue => {
      logger.level = newValue;
    },
    enumerable: true,
    configurable: true
  });

  const unleakIfString = x => _lodash.default.isString(x) ? ` ${x}`.substr(1) : x;

  for (const level of NPM_LEVELS) {
    wrappedLogger[level] = function (...args) {
      const actualPrefix = _lodash.default.isFunction(prefix) ? prefix() : prefix;

      for (const arg of args.map(unleakIfString)) {
        let out = arg + '';

        if (_lodash.default.isError(arg) && arg.stack) {
          out = arg.stack;
        }

        for (const line of out.split('\n')) {
          logger[level](actualPrefix, line);
        }
      }
    };
  }

  wrappedLogger.errorAndThrow = function (err) {
    if (!(err instanceof Error)) {
      err = new Error(err);
    }

    this.error(unleakIfString(err));
    throw err;
  };

  if (!usingGlobalLog) {
    wrappedLogger.level = 'verbose';
  }

  wrappedLogger.levels = NPM_LEVELS;
  return wrappedLogger;
}

const log = getLogger();
exports.log = log;
var _default = log;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9sb2dnaW5nLmpzIl0sIm5hbWVzIjpbIk5QTV9MRVZFTFMiLCJNQVhfTE9HX1JFQ09SRFNfQ09VTlQiLCJtb2NrTG9nIiwibGV2ZWwiLCJwYXRjaExvZ2dlciIsImxvZ2dlciIsImRlYnVnIiwiYWRkTGV2ZWwiLCJmZyIsImJnIiwiX2dldExvZ2dlciIsInRlc3RpbmdNb2RlIiwicGFyc2VJbnQiLCJwcm9jZXNzIiwiZW52IiwiX1RFU1RJTkciLCJmb3JjZUxvZ01vZGUiLCJfRk9SQ0VfTE9HUyIsInVzaW5nR2xvYmFsTG9nIiwiZ2xvYmFsIiwiX2dsb2JhbF9ucG1sb2ciLCJucG1sb2ciLCJtYXhSZWNvcmRTaXplIiwiZ2V0TG9nZ2VyIiwicHJlZml4Iiwid3JhcHBlZExvZ2dlciIsInVud3JhcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0IiwibmV3VmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwidW5sZWFrSWZTdHJpbmciLCJ4IiwiXyIsImlzU3RyaW5nIiwic3Vic3RyIiwiYXJncyIsImFjdHVhbFByZWZpeCIsImlzRnVuY3Rpb24iLCJhcmciLCJtYXAiLCJvdXQiLCJpc0Vycm9yIiwic3RhY2siLCJsaW5lIiwic3BsaXQiLCJlcnJvckFuZFRocm93IiwiZXJyIiwiRXJyb3IiLCJlcnJvciIsImxldmVscyIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUlBLE1BQU1BLFVBQVUsR0FBRyxDQUFDLE9BQUQsRUFBVSxTQUFWLEVBQXFCLE9BQXJCLEVBQThCLE1BQTlCLEVBQXNDLE1BQXRDLEVBQThDLE1BQTlDLEVBQXNELE9BQXRELENBQW5CO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsSUFBOUI7QUFHQSxJQUFJQyxPQUFPLEdBQUcsRUFBZDs7QUFDQSxLQUFLLElBQUlDLEtBQVQsSUFBa0JILFVBQWxCLEVBQThCO0FBQzVCRSxFQUFBQSxPQUFPLENBQUNDLEtBQUQsQ0FB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QztBQUNsQzNDLFVBQUFBLE1BQU0sQ0FBQ0YsS0FBRCxDQUFOLENBQWNxQyxZQUFkLEVBQTRCTyxJQUE1QjtBQUNEO0FBQ0Y7QUFDRixLQVhEO0FBWUQ7O0FBRUR0QixFQUFBQSxhQUFhLENBQUN3QixhQUFkLEdBQThCLFVBQVVDLEdBQVYsRUFBZTtBQUUzQyxRQUFJLEVBQUVBLEdBQUcsWUFBWUMsS0FBakIsQ0FBSixFQUE2QjtBQUMzQkQsTUFBQUEsR0FBRyxHQUFHLElBQUlDLEtBQUosQ0FBVUQsR0FBVixDQUFOO0FBQ0Q7O0FBRUQsU0FBS0UsS0FBTCxDQUFXbEIsY0FBYyxDQUFDZ0IsR0FBRCxDQUF6QjtBQUNBLFVBQU1BLEdBQU47QUFDRCxHQVJEOztBQVNBLE1BQUksQ0FBQ2hDLGNBQUwsRUFBcUI7QUFJbkJPLElBQUFBLGFBQWEsQ0FBQ3RCLEtBQWQsR0FBc0IsU0FBdEI7QUFDRDs7QUFDRHNCLEVBQUFBLGFBQWEsQ0FBQzRCLE1BQWQsR0FBdUJyRCxVQUF2QjtBQUNBLFNBQU95QixhQUFQO0FBQ0Q7O0FBR0QsTUFBTTZCLEdBQUcsR0FBRy9CLFNBQVMsRUFBckI7O2VBR2UrQixHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5wbWxvZyBmcm9tICducG1sb2cnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG4vLyBsZXZlbHMgdGhhdCBhcmUgYXZhaWxhYmxlIGZyb20gYG5wbWxvZ2BcbmNvbnN0IE5QTV9MRVZFTFMgPSBbJ3NpbGx5JywgJ3ZlcmJvc2UnLCAnZGVidWcnLCAnaW5mbycsICdodHRwJywgJ3dhcm4nLCAnZXJyb3InXTtcbmNvbnN0IE1BWF9MT0dfUkVDT1JEU19DT1VOVCA9IDMwMDA7XG5cbi8vIG1vY2sgbG9nIG9iamVjdCB1c2VkIGluIHRlc3RpbmcgbW9kZVxubGV0IG1vY2tMb2cgPSB7fTtcbmZvciAobGV0IGxldmVsIG9mIE5QTV9MRVZFTFMpIHtcbiAgbW9ja0xvZ1tsZXZlbF0gPSAoKSA9PiB7fTtcbn1cblxuZnVuY3Rpb24gcGF0Y2hMb2dnZXIgKGxvZ2dlcikge1xuICBpZiAoIWxvZ2dlci5kZWJ1Zykge1xuICAgIGxvZ2dlci5hZGRMZXZlbCgnZGVidWcnLCAxMDAwLCB7IGZnOiAnYmx1ZScsIGJnOiAnYmxhY2snIH0sICdkYnVnJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldExvZ2dlciAoKSB7XG4gIC8vIGNoZWNrIGlmIHRoZSB1c2VyIHNldCB0aGUgYF9URVNUSU5HYCBvciBgX0ZPUkNFX0xPR1NgIGZsYWdcbiAgY29uc3QgdGVzdGluZ01vZGUgPSBwYXJzZUludChwcm9jZXNzLmVudi5fVEVTVElORywgMTApID09PSAxO1xuICBjb25zdCBmb3JjZUxvZ01vZGUgPSBwYXJzZUludChwcm9jZXNzLmVudi5fRk9SQ0VfTE9HUywgMTApID09PSAxO1xuXG4gIC8vIGlmIGlzIHBvc3NpYmxlIHRoYXQgdGhlcmUgaXMgYSBsb2dnZXIgaW5zdGFuY2UgdGhhdCBpcyBhbHJlYWR5IGFyb3VuZCxcbiAgLy8gaW4gd2hpY2ggY2FzZSB3ZSB3YW50IHQgbyB1c2UgdGhhdFxuICBjb25zdCB1c2luZ0dsb2JhbExvZyA9ICEhZ2xvYmFsLl9nbG9iYWxfbnBtbG9nO1xuICBsZXQgbG9nZ2VyO1xuICBpZiAodGVzdGluZ01vZGUgJiYgIWZvcmNlTG9nTW9kZSkge1xuICAgIC8vIGluIHRlc3RpbmcgbW9kZSwgdXNlIGEgbW9jayBsb2dnZXIgb2JqZWN0IHRoYXQgd2UgY2FuIHF1ZXJ5XG4gICAgbG9nZ2VyID0gbW9ja0xvZztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGhlcndpc2UsIGVpdGhlciB1c2UgdGhlIGdsb2JhbCwgb3IgYSBuZXcgYG5wbWxvZ2Agb2JqZWN0XG4gICAgbG9nZ2VyID0gZ2xvYmFsLl9nbG9iYWxfbnBtbG9nIHx8IG5wbWxvZztcbiAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAxMDAwMCwgd2hpY2ggY2F1c2VzIGV4Y2Vzc2l2ZSBtZW1vcnkgdXNhZ2VcbiAgICBsb2dnZXIubWF4UmVjb3JkU2l6ZSA9IE1BWF9MT0dfUkVDT1JEU19DT1VOVDtcbiAgfVxuICBwYXRjaExvZ2dlcihsb2dnZXIpO1xuICByZXR1cm4gW2xvZ2dlciwgdXNpbmdHbG9iYWxMb2ddO1xufVxuXG5mdW5jdGlvbiBnZXRMb2dnZXIgKHByZWZpeCA9IG51bGwpIHtcbiAgbGV0IFtsb2dnZXIsIHVzaW5nR2xvYmFsTG9nXSA9IF9nZXRMb2dnZXIoKTtcblxuICAvLyB3cmFwIHRoZSBsb2dnZXIgc28gdGhhdCB3ZSBjYW4gY2F0Y2ggYW5kIG1vZGlmeSBhbnkgbG9nZ2luZ1xuICBsZXQgd3JhcHBlZExvZ2dlciA9IHt1bndyYXA6ICgpID0+IGxvZ2dlcn07XG5cbiAgLy8gYWxsb3cgYWNjZXNzIHRvIHRoZSBsZXZlbCBvZiB0aGUgdW5kZXJseWluZyBsb2dnZXJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdyYXBwZWRMb2dnZXIsICdsZXZlbCcsIHtcbiAgICBnZXQ6ICgpID0+IHsgcmV0dXJuIGxvZ2dlci5sZXZlbDsgfSxcbiAgICBzZXQ6IChuZXdWYWx1ZSkgPT4geyBsb2dnZXIubGV2ZWwgPSBuZXdWYWx1ZTsgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgLy8gVGhpcyBsYW1iZGEgZnVuY3Rpb24gaXMgbmVjZXNzYXJ5IHRvIHdvcmthcm91bmQgdW5leHBlY3RlZCBtZW1vcnkgbGVha3NcbiAgLy8gY2F1c2VkIGJ5IE5vZGVKUyBiZWhhdmlvciBkZXNjcmliZWQgaW4gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Mjg2OVxuICBjb25zdCB1bmxlYWtJZlN0cmluZyA9ICh4KSA9PiBfLmlzU3RyaW5nKHgpID8gYCAke3h9YC5zdWJzdHIoMSkgOiB4O1xuICAvLyBhZGQgYWxsIHRoZSBsZXZlbHMgZnJvbSBgbnBtbG9nYCwgYW5kIG1hcCB0byB0aGUgdW5kZXJseWluZyBsb2dnZXJcbiAgZm9yIChjb25zdCBsZXZlbCBvZiBOUE1fTEVWRUxTKSB7XG4gICAgd3JhcHBlZExvZ2dlcltsZXZlbF0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgY29uc3QgYWN0dWFsUHJlZml4ID0gXy5pc0Z1bmN0aW9uKHByZWZpeCkgPyBwcmVmaXgoKSA6IHByZWZpeDtcbiAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MubWFwKHVubGVha0lmU3RyaW5nKSkge1xuICAgICAgICBsZXQgb3V0ID0gYXJnICsgJyc7XG4gICAgICAgIGlmIChfLmlzRXJyb3IoYXJnKSAmJiBhcmcuc3RhY2spIHtcbiAgICAgICAgICBvdXQgPSBhcmcuc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIG91dC5zcGxpdCgnXFxuJykpIHtcbiAgICAgICAgICBsb2dnZXJbbGV2ZWxdKGFjdHVhbFByZWZpeCwgbGluZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8vIGFkZCBtZXRob2QgdG8gbG9nIGFuIGVycm9yLCBhbmQgdGhyb3cgaXQsIGZvciBjb252ZW5pZW5jZVxuICB3cmFwcGVkTG9nZ2VyLmVycm9yQW5kVGhyb3cgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgLy8gbWFrZSBzdXJlIHdlIGhhdmUgYW4gYEVycm9yYCBvYmplY3QuIFdyYXAgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICBlcnIgPSBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgLy8gbG9nIGFuZCB0aHJvd1xuICAgIHRoaXMuZXJyb3IodW5sZWFrSWZTdHJpbmcoZXJyKSk7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBpZiAoIXVzaW5nR2xvYmFsTG9nKSB7XG4gICAgLy8gaWYgd2UncmUgbm90IHVzaW5nIGEgZ2xvYmFsIGxvZyBzcGVjaWZpZWQgZnJvbSBzb21lIHRvcC1sZXZlbCBwYWNrYWdlLFxuICAgIC8vIHNldCB0aGUgbG9nIGxldmVsIHRvIGEgZGVmYXVsdCBvZiB2ZXJib3NlLiBPdGhlcndpc2UsIGxldCB0aGUgdG9wLWxldmVsXG4gICAgLy8gcGFja2FnZSBzZXQgdGhlIGxvZyBsZXZlbFxuICAgIHdyYXBwZWRMb2dnZXIubGV2ZWwgPSAndmVyYm9zZSc7XG4gIH1cbiAgd3JhcHBlZExvZ2dlci5sZXZlbHMgPSBOUE1fTEVWRUxTO1xuICByZXR1cm4gd3JhcHBlZExvZ2dlcjtcbn1cblxuLy8gZXhwb3J0IGEgZGVmYXVsdCBsb2dnZXIgd2l0aCBubyBwcmVmaXhcbmNvbnN0IGxvZyA9IGdldExvZ2dlcigpO1xuXG5leHBvcnQgeyBsb2csIHBhdGNoTG9nZ2VyLCBnZXRMb2dnZXIgfTtcbmV4cG9ydCBkZWZhdWx0IGxvZztcbiJdLCJmaWxlIjoibGliL2xvZ2dpbmcuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
