"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.open = open;
exports.path = path;
exports.staticDir = staticDir;
exports.openDir = void 0;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("./fs"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _constants = _interopRequireDefault(require("constants"));

var _logger = _interopRequireDefault(require("./logger"));

const RDWR_EXCL = _constants.default.O_CREAT | _constants.default.O_TRUNC | _constants.default.O_RDWR | _constants.default.O_EXCL;

async function tempDir() {
  let now = new Date();

  let filePath = _path.default.join(_os.default.tmpdir(), [now.getFullYear(), now.getMonth(), now.getDate(), '-', process.pid, '-', (Math.random() * 0x100000000 + 1).toString(36)].join(''));

  await _fs.default.mkdir(filePath);
  return filePath;
}

async function path(rawAffixes, defaultPrefix) {
  let affixes = parseAffixes(rawAffixes, defaultPrefix);
  let name = [affixes.prefix, affixes.suffix].join('');
  let tempDirectory = await tempDir();
  return _path.default.join(tempDirectory, name);
}

async function open(affixes) {
  let filePath = await path(affixes, 'f-');

  try {
    let fd = await _fs.default.open(filePath, RDWR_EXCL, 0o600);
    return {
      path: filePath,
      fd
    };
  } catch (err) {
    _logger.default.errorAndThrow(err);
  }
}

function parseAffixes(rawAffixes, defaultPrefix) {
  let affixes = {
    prefix: null,
    suffix: null
  };

  if (rawAffixes) {
    switch (typeof rawAffixes) {
      case 'string':
        affixes.prefix = rawAffixes;
        break;

      case 'object':
        affixes = rawAffixes;
        break;

      default:
        throw new Error(`Unknown affix declaration: ${affixes}`);
    }
  } else {
    affixes.prefix = defaultPrefix;
  }

  return affixes;
}

const _static = tempDir();

const openDir = tempDir;
exports.openDir = openDir;

async function staticDir() {
  return _static;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90ZW1wZGlyLmpzIl0sIm5hbWVzIjpbIlJEV1JfRVhDTCIsImNuc3QiLCJPX0NSRUFUIiwiT19UUlVOQyIsIk9fUkRXUiIsIk9fRVhDTCIsInRlbXBEaXIiLCJub3ciLCJEYXRlIiwiZmlsZVBhdGgiLCJub2RlUGF0aCIsImpvaW4iLCJvcyIsInRtcGRpciIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwicHJvY2VzcyIsInBpZCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsImZzIiwibWtkaXIiLCJwYXRoIiwicmF3QWZmaXhlcyIsImRlZmF1bHRQcmVmaXgiLCJhZmZpeGVzIiwicGFyc2VBZmZpeGVzIiwibmFtZSIsInByZWZpeCIsInN1ZmZpeCIsInRlbXBEaXJlY3RvcnkiLCJvcGVuIiwiZmQiLCJlcnIiLCJsb2ciLCJlcnJvckFuZFRocm93IiwiRXJyb3IiLCJfc3RhdGljIiwib3BlbkRpciIsInN0YXRpY0RpciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxTQUFTLEdBQUdDLG1CQUFLQyxPQUFMLEdBQWVELG1CQUFLRSxPQUFwQixHQUE4QkYsbUJBQUtHLE1BQW5DLEdBQTRDSCxtQkFBS0ksTUFBbkU7O0FBRUEsZUFBZUMsT0FBZixHQUEwQjtBQUN4QixNQUFJQyxHQUFHLEdBQUcsSUFBSUMsSUFBSixFQUFWOztBQUNBLE1BQUlDLFFBQVEsR0FBR0MsY0FBU0MsSUFBVCxDQUFjQyxZQUFHQyxNQUFILEVBQWQsRUFDYixDQUNFTixHQUFHLENBQUNPLFdBQUosRUFERixFQUNxQlAsR0FBRyxDQUFDUSxRQUFKLEVBRHJCLEVBQ3FDUixHQUFHLENBQUNTLE9BQUosRUFEckMsRUFFRSxHQUZGLEVBR0VDLE9BQU8sQ0FBQ0MsR0FIVixFQUlFLEdBSkYsRUFLRSxDQUFDQyxJQUFJLENBQUNDLE1BQUwsS0FBZ0IsV0FBaEIsR0FBOEIsQ0FBL0IsRUFBa0NDLFFBQWxDLENBQTJDLEVBQTNDLENBTEYsRUFNRVYsSUFORixDQU1PLEVBTlAsQ0FEYSxDQUFmOztBQVVBLFFBQU1XLFlBQUdDLEtBQUgsQ0FBU2QsUUFBVCxDQUFOO0FBRUEsU0FBT0EsUUFBUDtBQUNEOztBQUVELGVBQWVlLElBQWYsQ0FBcUJDLFVBQXJCLEVBQWlDQyxhQUFqQyxFQUFnRDtBQUM5QyxNQUFJQyxPQUFPLEdBQUdDLFlBQVksQ0FBQ0gsVUFBRCxFQUFhQyxhQUFiLENBQTFCO0FBQ0EsTUFBSUcsSUFBSSxHQUFHLENBQUNGLE9BQU8sQ0FBQ0csTUFBVCxFQUFpQkgsT0FBTyxDQUFDSSxNQUF6QixFQUFpQ3BCLElBQWpDLENBQXNDLEVBQXRDLENBQVg7QUFDQSxNQUFJcUIsYUFBYSxHQUFHLE1BQU0xQixPQUFPLEVBQWpDO0FBQ0EsU0FBT0ksY0FBU0MsSUFBVCxDQUFjcUIsYUFBZCxFQUE2QkgsSUFBN0IsQ0FBUDtBQUNEOztBQUVELGVBQWVJLElBQWYsQ0FBcUJOLE9BQXJCLEVBQThCO0FBQzVCLE1BQUlsQixRQUFRLEdBQUcsTUFBTWUsSUFBSSxDQUFDRyxPQUFELEVBQVUsSUFBVixDQUF6Qjs7QUFDQSxNQUFJO0FBQ0YsUUFBSU8sRUFBRSxHQUFHLE1BQU1aLFlBQUdXLElBQUgsQ0FBUXhCLFFBQVIsRUFBa0JULFNBQWxCLEVBQTZCLEtBQTdCLENBQWY7QUFFQSxXQUFPO0FBQUN3QixNQUFBQSxJQUFJLEVBQUVmLFFBQVA7QUFBaUJ5QixNQUFBQTtBQUFqQixLQUFQO0FBQ0QsR0FKRCxDQUlFLE9BQU9DLEdBQVAsRUFBWTtBQUNaQyxvQkFBSUMsYUFBSixDQUFrQkYsR0FBbEI7QUFDRDtBQUVGOztBQUVELFNBQVNQLFlBQVQsQ0FBdUJILFVBQXZCLEVBQW1DQyxhQUFuQyxFQUFrRDtBQUNoRCxNQUFJQyxPQUFPLEdBQUc7QUFBQ0csSUFBQUEsTUFBTSxFQUFFLElBQVQ7QUFBZUMsSUFBQUEsTUFBTSxFQUFFO0FBQXZCLEdBQWQ7O0FBQ0EsTUFBSU4sVUFBSixFQUFnQjtBQUNkLFlBQVEsT0FBT0EsVUFBZjtBQUNFLFdBQUssUUFBTDtBQUNFRSxRQUFBQSxPQUFPLENBQUNHLE1BQVIsR0FBaUJMLFVBQWpCO0FBQ0E7O0FBQ0YsV0FBSyxRQUFMO0FBQ0VFLFFBQUFBLE9BQU8sR0FBR0YsVUFBVjtBQUNBOztBQUNGO0FBQ0UsY0FBTSxJQUFJYSxLQUFKLENBQVcsOEJBQTZCWCxPQUFRLEVBQWhELENBQU47QUFSSjtBQVVELEdBWEQsTUFXTztBQUNMQSxJQUFBQSxPQUFPLENBQUNHLE1BQVIsR0FBaUJKLGFBQWpCO0FBQ0Q7O0FBQ0QsU0FBT0MsT0FBUDtBQUNEOztBQUVELE1BQU1ZLE9BQU8sR0FBR2pDLE9BQU8sRUFBdkI7O0FBQ0EsTUFBTWtDLE9BQU8sR0FBR2xDLE9BQWhCOzs7QUFFQSxlQUFlbUMsU0FBZixHQUE0QjtBQUMxQixTQUFPRixPQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGlzIGxpYnJhcnkgaXMgb3JpZ2luYXRlZCBmcm9tIHRlbXAuanMgYXQgaHR0cDovL2dpdGh1Yi5jb20vYnJ1Y2Uvbm9kZS10ZW1wICovXG5pbXBvcnQgZnMgZnJvbSAnLi9mcyc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IG5vZGVQYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGNuc3QgZnJvbSAnY29uc3RhbnRzJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5jb25zdCBSRFdSX0VYQ0wgPSBjbnN0Lk9fQ1JFQVQgfCBjbnN0Lk9fVFJVTkMgfCBjbnN0Lk9fUkRXUiB8IGNuc3QuT19FWENMO1xuXG5hc3luYyBmdW5jdGlvbiB0ZW1wRGlyICgpIHtcbiAgbGV0IG5vdyA9IG5ldyBEYXRlKCk7XG4gIGxldCBmaWxlUGF0aCA9IG5vZGVQYXRoLmpvaW4ob3MudG1wZGlyKCksXG4gICAgW1xuICAgICAgbm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCBub3cuZ2V0RGF0ZSgpLFxuICAgICAgJy0nLFxuICAgICAgcHJvY2Vzcy5waWQsXG4gICAgICAnLScsXG4gICAgICAoTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwICsgMSkudG9TdHJpbmcoMzYpLFxuICAgIF0uam9pbignJykpO1xuICAvLyBjcmVhdGVzIGEgdGVtcCBkaXJlY3RvcnkgdXNpbmcgdGhlIGRhdGUgYW5kIGEgcmFuZG9tIHN0cmluZ1xuXG4gIGF3YWl0IGZzLm1rZGlyKGZpbGVQYXRoKTtcblxuICByZXR1cm4gZmlsZVBhdGg7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHBhdGggKHJhd0FmZml4ZXMsIGRlZmF1bHRQcmVmaXgpIHtcbiAgbGV0IGFmZml4ZXMgPSBwYXJzZUFmZml4ZXMocmF3QWZmaXhlcywgZGVmYXVsdFByZWZpeCk7XG4gIGxldCBuYW1lID0gW2FmZml4ZXMucHJlZml4LCBhZmZpeGVzLnN1ZmZpeF0uam9pbignJyk7XG4gIGxldCB0ZW1wRGlyZWN0b3J5ID0gYXdhaXQgdGVtcERpcigpO1xuICByZXR1cm4gbm9kZVBhdGguam9pbih0ZW1wRGlyZWN0b3J5LCBuYW1lKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gb3BlbiAoYWZmaXhlcykge1xuICBsZXQgZmlsZVBhdGggPSBhd2FpdCBwYXRoKGFmZml4ZXMsICdmLScpO1xuICB0cnkge1xuICAgIGxldCBmZCA9IGF3YWl0IGZzLm9wZW4oZmlsZVBhdGgsIFJEV1JfRVhDTCwgMG82MDApO1xuICAgIC8vIG9wZW5zIHRoZSBmaWxlIGluIG1vZGUgMzg0XG4gICAgcmV0dXJuIHtwYXRoOiBmaWxlUGF0aCwgZmR9O1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhlcnIpO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VBZmZpeGVzIChyYXdBZmZpeGVzLCBkZWZhdWx0UHJlZml4KSB7XG4gIGxldCBhZmZpeGVzID0ge3ByZWZpeDogbnVsbCwgc3VmZml4OiBudWxsfTtcbiAgaWYgKHJhd0FmZml4ZXMpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiByYXdBZmZpeGVzKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBhZmZpeGVzLnByZWZpeCA9IHJhd0FmZml4ZXM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgYWZmaXhlcyA9IHJhd0FmZml4ZXM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGFmZml4IGRlY2xhcmF0aW9uOiAke2FmZml4ZXN9YCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFmZml4ZXMucHJlZml4ID0gZGVmYXVsdFByZWZpeDtcbiAgfVxuICByZXR1cm4gYWZmaXhlcztcbn1cblxuY29uc3QgX3N0YXRpYyA9IHRlbXBEaXIoKTtcbmNvbnN0IG9wZW5EaXIgPSB0ZW1wRGlyO1xuXG5hc3luYyBmdW5jdGlvbiBzdGF0aWNEaXIgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgcmV0dXJuIF9zdGF0aWM7XG59XG5cbmV4cG9ydCB7IG9wZW4sIHBhdGgsIG9wZW5EaXIsIHN0YXRpY0RpciB9O1xuIl0sImZpbGUiOiJsaWIvdGVtcGRpci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
