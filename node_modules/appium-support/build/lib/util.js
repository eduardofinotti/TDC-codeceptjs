"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasContent = hasContent;
exports.hasValue = hasValue;
exports.escapeSpace = escapeSpace;
exports.escapeSpecialChars = escapeSpecialChars;
exports.localIp = localIp;
exports.cancellableDelay = cancellableDelay;
exports.multiResolve = multiResolve;
exports.safeJsonParse = safeJsonParse;
exports.wrapElement = wrapElement;
exports.unwrapElement = unwrapElement;
exports.filterObject = filterObject;
exports.toReadableSizeString = toReadableSizeString;
exports.isSubPath = isSubPath;
exports.isSameDestination = isSameDestination;
exports.compareVersions = compareVersions;
exports.coerceVersion = coerceVersion;
exports.W3C_WEB_ELEMENT_IDENTIFIER = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("./fs"));

var _semver = _interopRequireDefault(require("semver"));

const W3C_WEB_ELEMENT_IDENTIFIER = 'element-6066-11e4-a52e-4f735466cecf';
exports.W3C_WEB_ELEMENT_IDENTIFIER = W3C_WEB_ELEMENT_IDENTIFIER;

function hasContent(val) {
  return _lodash.default.isString(val) && val !== '';
}

function hasValue(val) {
  let hasVal = false;

  if (_lodash.default.isNumber(val)) {
    hasVal = !_lodash.default.isNaN(val);
  } else {
    hasVal = !_lodash.default.isUndefined(val) && !_lodash.default.isNull(val);
  }

  return hasVal;
}

function escapeSpace(str) {
  return str.split(/ /).join('\\ ');
}

function escapeSpecialChars(str, quoteEscape) {
  if (typeof str !== 'string') {
    return str;
  }

  if (typeof quoteEscape === 'undefined') {
    quoteEscape = false;
  }

  str = str.replace(/[\\]/g, '\\\\').replace(/[\/]/g, '\\/').replace(/[\b]/g, '\\b').replace(/[\f]/g, '\\f').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r').replace(/[\t]/g, '\\t').replace(/[\"]/g, '\\"').replace(/\\'/g, "\\'");

  if (quoteEscape) {
    let re = new RegExp(quoteEscape, 'g');
    str = str.replace(re, `\\${quoteEscape}`);
  }

  return str;
}

function localIp() {
  let ip = _lodash.default.chain(_os.default.networkInterfaces()).values().flatten().filter(function (val) {
    return val.family === 'IPv4' && val.internal === false;
  }).map('address').first().value();

  return ip;
}

function cancellableDelay(ms) {
  let timer;
  let resolve;
  let reject;
  const delay = new _bluebird.default.Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
    timer = setTimeout(function () {
      resolve();
    }, ms);
  });

  delay.cancel = function () {
    clearTimeout(timer);
    reject(new _bluebird.default.CancellationError());
  };

  return delay;
}

function multiResolve(roots, ...args) {
  return roots.map(root => {
    return _path.default.resolve(root, ...args);
  });
}

function safeJsonParse(obj) {
  try {
    obj = JSON.parse(obj);
  } catch (ign) {}

  return obj;
}

function unwrapElement(el) {
  for (const propName of [W3C_WEB_ELEMENT_IDENTIFIER, 'ELEMENT']) {
    if (_lodash.default.has(el, propName)) {
      return el[propName];
    }
  }

  return el;
}

function wrapElement(elementId) {
  return {
    ELEMENT: elementId,
    [W3C_WEB_ELEMENT_IDENTIFIER]: elementId
  };
}

function filterObject(obj, predicate) {
  let newObj = _lodash.default.clone(obj);

  if (_lodash.default.isUndefined(predicate)) {
    predicate = v => !_lodash.default.isUndefined(v);
  } else if (!_lodash.default.isFunction(predicate)) {
    const valuePredicate = predicate;

    predicate = v => v === valuePredicate;
  }

  for (const key of Object.keys(obj)) {
    if (!predicate(obj[key], obj)) {
      delete newObj[key];
    }
  }

  return newObj;
}

function toReadableSizeString(bytes) {
  const intBytes = parseInt(bytes, 10);

  if (isNaN(intBytes) || intBytes < 0) {
    throw new Error(`Cannot convert '${bytes}' to a readable size format`);
  }

  if (intBytes >= 1024 * 1024 * 1024) {
    return `${parseFloat(intBytes / (1024 * 1024 * 1024.0)).toFixed(2)} GB`;
  } else if (intBytes >= 1024 * 1024) {
    return `${parseFloat(intBytes / (1024 * 1024.0)).toFixed(2)} MB`;
  } else if (intBytes >= 1024) {
    return `${parseFloat(intBytes / 1024.0).toFixed(2)} KB`;
  }

  return `${intBytes} B`;
}

function isSubPath(originalPath, root, forcePosix = null) {
  const pathObj = forcePosix ? _path.default.posix : _path.default;

  for (const p of [originalPath, root]) {
    if (!pathObj.isAbsolute(p)) {
      throw new Error(`'${p}' is expected to be an absolute path`);
    }
  }

  const normalizedRoot = pathObj.normalize(root);
  const normalizedPath = pathObj.normalize(originalPath);
  return normalizedPath.startsWith(normalizedRoot);
}

async function isSameDestination(path1, path2, ...pathN) {
  const allPaths = [path1, path2, ...pathN];

  if (!(await _bluebird.default.reduce(allPaths, async (a, b) => a && (await _fs.default.exists(b)), true))) {
    return false;
  }

  const areAllItemsEqual = arr => !!arr.reduce((a, b) => a === b ? a : NaN);

  if (areAllItemsEqual(allPaths)) {
    return true;
  }

  return areAllItemsEqual((await _bluebird.default.map(allPaths, async x => (await _fs.default.stat(x)).ino)));
}

function coerceVersion(ver, strict = true) {
  const result = _semver.default.valid(_semver.default.coerce(`${ver}`));

  if (strict && !result) {
    throw new Error(`'${ver}' cannot be coerced to a valid version number`);
  }

  return result;
}

const SUPPORTED_OPERATORS = ['==', '!=', '>', '<', '>=', '<=', '='];

function compareVersions(ver1, operator, ver2) {
  if (!SUPPORTED_OPERATORS.includes(operator)) {
    throw new Error(`The '${operator}' comparison operator is not supported. ` + `Only '${JSON.stringify(SUPPORTED_OPERATORS)}' operators are supported`);
  }

  const semverOperator = ['==', '!='].includes(operator) ? '=' : operator;

  const result = _semver.default.satisfies(coerceVersion(ver1), `${semverOperator}${coerceVersion(ver2)}`);

  return operator === '!=' ? !result : result;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
