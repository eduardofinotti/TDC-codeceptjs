"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWindows = isWindows;
exports.isMac = isMac;
exports.isLinux = isLinux;
exports.isOSWin64 = isOSWin64;
exports.arch = arch;
exports.macOsxVersion = macOsxVersion;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _os = _interopRequireDefault(require("os"));

const VERSION_PATTERN = /^(\d+\.\d+)/m;

function isWindows() {
  return _os.default.type() === 'Windows_NT';
}

function isMac() {
  return _os.default.type() === 'Darwin';
}

function isLinux() {
  return !isWindows() && !isMac();
}

function isOSWin64() {
  return process.arch === 'x64' || process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');
}

async function arch() {
  if (isLinux() || isMac()) {
    let {
      stdout
    } = await (0, _teen_process.exec)('uname', ['-m']);
    return stdout.trim() === 'i686' ? '32' : '64';
  } else if (isWindows()) {
    let is64 = this.isOSWin64();
    return is64 ? '64' : '32';
  }
}

async function macOsxVersion() {
  let stdout;

  try {
    stdout = (await (0, _teen_process.exec)('sw_vers', ['-productVersion'])).stdout.trim();
  } catch (err) {
    throw new Error(`Could not detect Mac OS X Version: ${err}`);
  }

  const versionMatch = VERSION_PATTERN.exec(stdout);

  if (!versionMatch) {
    throw new Error(`Could not detect Mac OS X Version from sw_vers output: '${stdout}'`);
  }

  return versionMatch[1];
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zeXN0ZW0uanMiXSwibmFtZXMiOlsiVkVSU0lPTl9QQVRURVJOIiwiaXNXaW5kb3dzIiwib3MiLCJ0eXBlIiwiaXNNYWMiLCJpc0xpbnV4IiwiaXNPU1dpbjY0IiwicHJvY2VzcyIsImFyY2giLCJlbnYiLCJoYXNPd25Qcm9wZXJ0eSIsInN0ZG91dCIsInRyaW0iLCJpczY0IiwibWFjT3N4VmVyc2lvbiIsImVyciIsIkVycm9yIiwidmVyc2lvbk1hdGNoIiwiZXhlYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLGVBQWUsR0FBRyxjQUF4Qjs7QUFFQSxTQUFTQyxTQUFULEdBQXNCO0FBQ3BCLFNBQU9DLFlBQUdDLElBQUgsT0FBYyxZQUFyQjtBQUNEOztBQUVELFNBQVNDLEtBQVQsR0FBa0I7QUFDaEIsU0FBT0YsWUFBR0MsSUFBSCxPQUFjLFFBQXJCO0FBQ0Q7O0FBRUQsU0FBU0UsT0FBVCxHQUFvQjtBQUNsQixTQUFPLENBQUNKLFNBQVMsRUFBVixJQUFnQixDQUFDRyxLQUFLLEVBQTdCO0FBQ0Q7O0FBRUQsU0FBU0UsU0FBVCxHQUFzQjtBQUNwQixTQUFPQyxPQUFPLENBQUNDLElBQVIsS0FBaUIsS0FBakIsSUFBMEJELE9BQU8sQ0FBQ0UsR0FBUixDQUFZQyxjQUFaLENBQTJCLHdCQUEzQixDQUFqQztBQUNEOztBQUVELGVBQWVGLElBQWYsR0FBdUI7QUFDckIsTUFBSUgsT0FBTyxNQUFNRCxLQUFLLEVBQXRCLEVBQTBCO0FBQ3hCLFFBQUk7QUFBQ08sTUFBQUE7QUFBRCxRQUFXLE1BQU0sd0JBQUssT0FBTCxFQUFjLENBQUMsSUFBRCxDQUFkLENBQXJCO0FBQ0EsV0FBT0EsTUFBTSxDQUFDQyxJQUFQLE9BQWtCLE1BQWxCLEdBQTJCLElBQTNCLEdBQWtDLElBQXpDO0FBQ0QsR0FIRCxNQUdPLElBQUlYLFNBQVMsRUFBYixFQUFpQjtBQUN0QixRQUFJWSxJQUFJLEdBQUcsS0FBS1AsU0FBTCxFQUFYO0FBQ0EsV0FBT08sSUFBSSxHQUFHLElBQUgsR0FBVSxJQUFyQjtBQUNEO0FBQ0Y7O0FBRUQsZUFBZUMsYUFBZixHQUFnQztBQUM5QixNQUFJSCxNQUFKOztBQUNBLE1BQUk7QUFDRkEsSUFBQUEsTUFBTSxHQUFHLENBQUMsTUFBTSx3QkFBSyxTQUFMLEVBQWdCLENBQUMsaUJBQUQsQ0FBaEIsQ0FBUCxFQUE2Q0EsTUFBN0MsQ0FBb0RDLElBQXBELEVBQVQ7QUFDRCxHQUZELENBRUUsT0FBT0csR0FBUCxFQUFZO0FBQ1osVUFBTSxJQUFJQyxLQUFKLENBQVcsc0NBQXFDRCxHQUFJLEVBQXBELENBQU47QUFDRDs7QUFFRCxRQUFNRSxZQUFZLEdBQUdqQixlQUFlLENBQUNrQixJQUFoQixDQUFxQlAsTUFBckIsQ0FBckI7O0FBQ0EsTUFBSSxDQUFDTSxZQUFMLEVBQW1CO0FBQ2pCLFVBQU0sSUFBSUQsS0FBSixDQUFXLDJEQUEwREwsTUFBTyxHQUE1RSxDQUFOO0FBQ0Q7O0FBQ0QsU0FBT00sWUFBWSxDQUFDLENBQUQsQ0FBbkI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcblxuY29uc3QgVkVSU0lPTl9QQVRURVJOID0gL14oXFxkK1xcLlxcZCspL207XG5cbmZ1bmN0aW9uIGlzV2luZG93cyAoKSB7XG4gIHJldHVybiBvcy50eXBlKCkgPT09ICdXaW5kb3dzX05UJztcbn1cblxuZnVuY3Rpb24gaXNNYWMgKCkge1xuICByZXR1cm4gb3MudHlwZSgpID09PSAnRGFyd2luJztcbn1cblxuZnVuY3Rpb24gaXNMaW51eCAoKSB7XG4gIHJldHVybiAhaXNXaW5kb3dzKCkgJiYgIWlzTWFjKCk7XG59XG5cbmZ1bmN0aW9uIGlzT1NXaW42NCAoKSB7XG4gIHJldHVybiBwcm9jZXNzLmFyY2ggPT09ICd4NjQnIHx8IHByb2Nlc3MuZW52Lmhhc093blByb3BlcnR5KCdQUk9DRVNTT1JfQVJDSElURVc2NDMyJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFyY2ggKCkge1xuICBpZiAoaXNMaW51eCgpIHx8IGlzTWFjKCkpIHtcbiAgICBsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjKCd1bmFtZScsIFsnLW0nXSk7XG4gICAgcmV0dXJuIHN0ZG91dC50cmltKCkgPT09ICdpNjg2JyA/ICczMicgOiAnNjQnO1xuICB9IGVsc2UgaWYgKGlzV2luZG93cygpKSB7XG4gICAgbGV0IGlzNjQgPSB0aGlzLmlzT1NXaW42NCgpO1xuICAgIHJldHVybiBpczY0ID8gJzY0JyA6ICczMic7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbWFjT3N4VmVyc2lvbiAoKSB7XG4gIGxldCBzdGRvdXQ7XG4gIHRyeSB7XG4gICAgc3Rkb3V0ID0gKGF3YWl0IGV4ZWMoJ3N3X3ZlcnMnLCBbJy1wcm9kdWN0VmVyc2lvbiddKSkuc3Rkb3V0LnRyaW0oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZGV0ZWN0IE1hYyBPUyBYIFZlcnNpb246ICR7ZXJyfWApO1xuICB9XG5cbiAgY29uc3QgdmVyc2lvbk1hdGNoID0gVkVSU0lPTl9QQVRURVJOLmV4ZWMoc3Rkb3V0KTtcbiAgaWYgKCF2ZXJzaW9uTWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBkZXRlY3QgTWFjIE9TIFggVmVyc2lvbiBmcm9tIHN3X3ZlcnMgb3V0cHV0OiAnJHtzdGRvdXR9J2ApO1xuICB9XG4gIHJldHVybiB2ZXJzaW9uTWF0Y2hbMV07XG59XG5cbmV4cG9ydCB7IGlzV2luZG93cywgaXNNYWMsIGlzTGludXgsIGlzT1NXaW42NCwgYXJjaCwgbWFjT3N4VmVyc2lvbiB9O1xuIl0sImZpbGUiOiJsaWIvc3lzdGVtLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
