"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fs = void 0;

require("source-map-support/register");

var _fs2 = _interopRequireDefault(require("fs"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _md5File = _interopRequireDefault(require("md5-file"));

var _ncp = _interopRequireDefault(require("ncp"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mv = _interopRequireDefault(require("mv"));

var _which = _interopRequireDefault(require("which"));

var _glob = _interopRequireDefault(require("glob"));

var _crypto = _interopRequireDefault(require("crypto"));

const md5 = _bluebird.default.promisify(_md5File.default);

let fs = {
  async hasAccess(path) {
    try {
      await this.access(path, _fs2.default.R_OK);
    } catch (err) {
      return false;
    }

    return true;
  },

  exists(path) {
    return this.hasAccess(path);
  },

  rimraf: _bluebird.default.promisify(_rimraf.default),

  async mkdir(dirName) {
    let _mkdir = _bluebird.default.promisify(_fs2.default.mkdir);

    try {
      await _mkdir(dirName);
    } catch (err) {
      if (err && err.code !== 'EEXIST') {
        throw err;
      }
    }
  },

  async copyFile(source, destination, ...otherArgs) {
    if (!(await this.hasAccess(source))) {
      throw new Error(`The file at '${source}' does not exist or is not accessible`);
    }

    return await _bluebird.default.promisify(_ncp.default)(source, destination, ...otherArgs);
  },

  async md5(filePath) {
    return await md5(filePath);
  },

  mv: _bluebird.default.promisify(_mv.default),
  which: _bluebird.default.promisify(_which.default),
  glob: _bluebird.default.promisify(_glob.default),

  async hash(filePath, algorithm = 'sha1') {
    return await new _bluebird.default((resolve, reject) => {
      const fileHash = _crypto.default.createHash(algorithm);

      const readStream = _fs2.default.createReadStream(filePath);

      readStream.on('error', e => reject(new Error(`Cannot calculate ${algorithm} hash for '${filePath}'. Original error: ${e.message}`)));
      readStream.on('data', chunk => fileHash.update(chunk));
      readStream.on('end', () => resolve(fileHash.digest('hex')));
    });
  }

};
exports.fs = fs;
const simples = ['open', 'close', 'access', 'readFile', 'writeFile', 'write', 'read', 'readlink', 'chmod', 'unlink', 'readdir', 'stat', 'rename', 'lstat'];

for (const s of simples) {
  fs[s] = _bluebird.default.promisify(_fs2.default[s]);
}

var _default = fs;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mcy5qcyJdLCJuYW1lcyI6WyJtZDUiLCJCIiwicHJvbWlzaWZ5IiwibWQ1ZmlsZSIsImZzIiwiaGFzQWNjZXNzIiwicGF0aCIsImFjY2VzcyIsIl9mcyIsIlJfT0siLCJlcnIiLCJleGlzdHMiLCJyaW1yYWYiLCJta2RpciIsImRpck5hbWUiLCJfbWtkaXIiLCJjb2RlIiwiY29weUZpbGUiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsIm90aGVyQXJncyIsIkVycm9yIiwibmNwIiwiZmlsZVBhdGgiLCJtdiIsIndoaWNoIiwiZ2xvYiIsImhhc2giLCJhbGdvcml0aG0iLCJyZXNvbHZlIiwicmVqZWN0IiwiZmlsZUhhc2giLCJjcnlwdG8iLCJjcmVhdGVIYXNoIiwicmVhZFN0cmVhbSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJvbiIsImUiLCJtZXNzYWdlIiwiY2h1bmsiLCJ1cGRhdGUiLCJkaWdlc3QiLCJzaW1wbGVzIiwicyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxHQUFHLEdBQUdDLGtCQUFFQyxTQUFGLENBQVlDLGdCQUFaLENBQVo7O0FBRUEsSUFBSUMsRUFBRSxHQUFHO0FBQ1AsUUFBTUMsU0FBTixDQUFpQkMsSUFBakIsRUFBdUI7QUFDckIsUUFBSTtBQUNGLFlBQU0sS0FBS0MsTUFBTCxDQUFZRCxJQUFaLEVBQWtCRSxhQUFJQyxJQUF0QixDQUFOO0FBQ0QsS0FGRCxDQUVFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLGFBQU8sS0FBUDtBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNELEdBUk07O0FBU1BDLEVBQUFBLE1BQU0sQ0FBRUwsSUFBRixFQUFRO0FBQUUsV0FBTyxLQUFLRCxTQUFMLENBQWVDLElBQWYsQ0FBUDtBQUE4QixHQVR2Qzs7QUFVUE0sRUFBQUEsTUFBTSxFQUFFWCxrQkFBRUMsU0FBRixDQUFZVSxlQUFaLENBVkQ7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cG9ydCByaW1yYWYgZnJvbSAncmltcmFmJztcbmltcG9ydCBtZDVmaWxlIGZyb20gJ21kNS1maWxlJztcbmltcG9ydCBuY3AgZnJvbSAnbmNwJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBtdiBmcm9tICdtdic7XG5pbXBvcnQgd2hpY2ggZnJvbSAnd2hpY2gnO1xuaW1wb3J0IGdsb2IgZnJvbSAnZ2xvYic7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cblxuY29uc3QgbWQ1ID0gQi5wcm9taXNpZnkobWQ1ZmlsZSk7XG5cbmxldCBmcyA9IHtcbiAgYXN5bmMgaGFzQWNjZXNzIChwYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuYWNjZXNzKHBhdGgsIF9mcy5SX09LKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGV4aXN0cyAocGF0aCkgeyByZXR1cm4gdGhpcy5oYXNBY2Nlc3MocGF0aCk7IH0sXG4gIHJpbXJhZjogQi5wcm9taXNpZnkocmltcmFmKSxcbiAgYXN5bmMgbWtkaXIgKGRpck5hbWUpIHtcbiAgICBsZXQgX21rZGlyID0gQi5wcm9taXNpZnkoX2ZzLm1rZGlyKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgX21rZGlyKGRpck5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciAmJiBlcnIuY29kZSAhPT0gJ0VFWElTVCcpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgYXN5bmMgY29weUZpbGUgKHNvdXJjZSwgZGVzdGluYXRpb24sIC4uLm90aGVyQXJncykge1xuICAgIGlmICghYXdhaXQgdGhpcy5oYXNBY2Nlc3Moc291cmNlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZmlsZSBhdCAnJHtzb3VyY2V9JyBkb2VzIG5vdCBleGlzdCBvciBpcyBub3QgYWNjZXNzaWJsZWApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgKEIucHJvbWlzaWZ5KG5jcCkpKHNvdXJjZSwgZGVzdGluYXRpb24sIC4uLm90aGVyQXJncyk7XG4gIH0sXG4gIGFzeW5jIG1kNSAoZmlsZVBhdGgpIHtcbiAgICByZXR1cm4gYXdhaXQgbWQ1KGZpbGVQYXRoKTtcbiAgfSxcbiAgbXY6IEIucHJvbWlzaWZ5KG12KSxcbiAgd2hpY2g6IEIucHJvbWlzaWZ5KHdoaWNoKSxcbiAgZ2xvYjogQi5wcm9taXNpZnkoZ2xvYiksXG4gIGFzeW5jIGhhc2ggKGZpbGVQYXRoLCBhbGdvcml0aG0gPSAnc2hhMScpIHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgZmlsZUhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaChhbGdvcml0aG0pO1xuICAgICAgY29uc3QgcmVhZFN0cmVhbSA9IF9mcy5jcmVhdGVSZWFkU3RyZWFtKGZpbGVQYXRoKTtcbiAgICAgIHJlYWRTdHJlYW0ub24oJ2Vycm9yJywgKGUpID0+IHJlamVjdChcbiAgICAgICAgbmV3IEVycm9yKGBDYW5ub3QgY2FsY3VsYXRlICR7YWxnb3JpdGhtfSBoYXNoIGZvciAnJHtmaWxlUGF0aH0nLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCkpKTtcbiAgICAgIHJlYWRTdHJlYW0ub24oJ2RhdGEnLCAoY2h1bmspID0+IGZpbGVIYXNoLnVwZGF0ZShjaHVuaykpO1xuICAgICAgcmVhZFN0cmVhbS5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShmaWxlSGFzaC5kaWdlc3QoJ2hleCcpKSk7XG4gICAgfSk7XG4gIH0sXG59O1xuXG5jb25zdCBzaW1wbGVzID0gW1xuICAnb3BlbicsICdjbG9zZScsICdhY2Nlc3MnLCAncmVhZEZpbGUnLCAnd3JpdGVGaWxlJywgJ3dyaXRlJywgJ3JlYWQnLFxuICAncmVhZGxpbmsnLCAnY2htb2QnLCAndW5saW5rJywgJ3JlYWRkaXInLCAnc3RhdCcsICdyZW5hbWUnLCAnbHN0YXQnLFxuXTtcblxuZm9yIChjb25zdCBzIG9mIHNpbXBsZXMpIHtcbiAgZnNbc10gPSBCLnByb21pc2lmeShfZnNbc10pO1xufVxuXG5leHBvcnQgeyBmcyB9O1xuZXhwb3J0IGRlZmF1bHQgZnM7XG4iXSwiZmlsZSI6ImxpYi9mcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
