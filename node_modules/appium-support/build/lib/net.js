"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadFile = uploadFile;

require("source-map-support/register");

var _fs = require("fs");

var _fs2 = _interopRequireDefault(require("./fs"));

var _url = _interopRequireDefault(require("url"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _util = require("./util");

var _logger = _interopRequireDefault(require("./logger"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _jsftp = _interopRequireDefault(require("jsftp"));

async function uploadFileToHttp(remoteUrl, uploadOptions = {}) {
  _logger.default.debug(`${remoteUrl.protocol} upload options: ${JSON.stringify(uploadOptions)}`);

  const response = await (0, _requestPromise.default)(uploadOptions);
  const responseDebugMsg = `Response code: ${response.statusCode}. ` + `Response body: ${JSON.stringify(response.body)}`;

  _logger.default.debug(responseDebugMsg);

  if (response.statusCode >= 400) {
    throw new Error(`Cannot upload the recorded media to '${remoteUrl.href}'. ${responseDebugMsg}`);
  }
}

async function uploadFileToFtp(localFileStream, remoteUrl, uploadOptions = {}) {
  _logger.default.debug(`${remoteUrl.protocol} upload options: ${JSON.stringify(uploadOptions)}`);

  return await new _bluebird.default((resolve, reject) => {
    new _jsftp.default(uploadOptions).put(localFileStream, remoteUrl.pathname, err => {
      if (err) {
        return reject(err);
      }

      resolve();
    });
  });
}

async function uploadFile(localPath, remotePath, uploadOptions = {}) {
  if (!(await _fs2.default.exists(localPath))) {
    throw new Error(`'${localPath}' does not exists or is not accessible`);
  }

  const remoteUrl = _url.default.parse(remotePath);

  const {
    size
  } = await _fs2.default.stat(localPath);

  _logger.default.info(`Uploading '${localPath}' of ${(0, _util.toReadableSizeString)(size)} size to '${remotePath}'...`);

  const timeStarted = process.hrtime();

  if (['http:', 'https:'].includes(remoteUrl.protocol)) {
    await uploadFileToHttp(remoteUrl, uploadOptions);
  } else if (remoteUrl.protocol === 'ftp:') {
    await uploadFileToFtp((0, _fs.createReadStream)(localPath), remoteUrl, uploadOptions);
  } else {
    throw new Error(`Cannot upload the file at '${localPath}' to '${remotePath}'. ` + `Unsupported remote protocol '${remoteUrl.protocol}'. ` + `Only http/https and ftp protocols are supported.`);
  }

  const timeElapsed = process.hrtime(timeStarted)[0];

  _logger.default.info(`Uploaded '${localPath}' of ${(0, _util.toReadableSizeString)(size)} size in ${timeElapsed} second${timeElapsed === 1 ? '' : 's'}`);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9uZXQuanMiXSwibmFtZXMiOlsidXBsb2FkRmlsZVRvSHR0cCIsInJlbW90ZVVybCIsInVwbG9hZE9wdGlvbnMiLCJsb2ciLCJkZWJ1ZyIsInByb3RvY29sIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3BvbnNlIiwicmVzcG9uc2VEZWJ1Z01zZyIsInN0YXR1c0NvZGUiLCJib2R5IiwiRXJyb3IiLCJocmVmIiwidXBsb2FkRmlsZVRvRnRwIiwibG9jYWxGaWxlU3RyZWFtIiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJGdHAiLCJwdXQiLCJwYXRobmFtZSIsImVyciIsInVwbG9hZEZpbGUiLCJsb2NhbFBhdGgiLCJyZW1vdGVQYXRoIiwiZnMiLCJleGlzdHMiLCJ1cmwiLCJwYXJzZSIsInNpemUiLCJzdGF0IiwiaW5mbyIsInRpbWVTdGFydGVkIiwicHJvY2VzcyIsImhydGltZSIsImluY2x1ZGVzIiwidGltZUVsYXBzZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsZUFBZUEsZ0JBQWYsQ0FBaUNDLFNBQWpDLEVBQTRDQyxhQUFhLEdBQUcsRUFBNUQsRUFBZ0U7QUFDOURDLGtCQUFJQyxLQUFKLENBQVcsR0FBRUgsU0FBUyxDQUFDSSxRQUFTLG9CQUFtQkMsSUFBSSxDQUFDQyxTQUFMLENBQWVMLGFBQWYsQ0FBOEIsRUFBakY7O0FBQ0EsUUFBTU0sUUFBUSxHQUFHLE1BQU0sNkJBQVFOLGFBQVIsQ0FBdkI7QUFDQSxRQUFNTyxnQkFBZ0IsR0FBSSxrQkFBaUJELFFBQVEsQ0FBQ0UsVUFBVyxJQUF0QyxHQUNDLGtCQUFpQkosSUFBSSxDQUFDQyxTQUFMLENBQWVDLFFBQVEsQ0FBQ0csSUFBeEIsQ0FBOEIsRUFEekU7O0FBRUFSLGtCQUFJQyxLQUFKLENBQVVLLGdCQUFWOztBQUNBLE1BQUlELFFBQVEsQ0FBQ0UsVUFBVCxJQUF1QixHQUEzQixFQUFnQztBQUM5QixVQUFNLElBQUlFLEtBQUosQ0FBVyx3Q0FBdUNYLFNBQVMsQ0FBQ1ksSUFBSyxNQUFLSixnQkFBaUIsRUFBdkYsQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsZUFBZUssZUFBZixDQUFnQ0MsZUFBaEMsRUFBaURkLFNBQWpELEVBQTREQyxhQUFhLEdBQUcsRUFBNUUsRUFBZ0Y7QUFDOUVDLGtCQUFJQyxLQUFKLENBQVcsR0FBRUgsU0FBUyxDQUFDSSxRQUFTLG9CQUFtQkMsSUFBSSxDQUFDQyxTQUFMLENBQWVMLGFBQWYsQ0FBOEIsRUFBakY7O0FBQ0EsU0FBTyxNQUFNLElBQUljLGlCQUFKLENBQU0sQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDLFFBQUlDLGNBQUosQ0FBUWpCLGFBQVIsRUFBdUJrQixHQUF2QixDQUEyQkwsZUFBM0IsRUFBNENkLFNBQVMsQ0FBQ29CLFFBQXRELEVBQWlFQyxHQUFELElBQVM7QUFDdkUsVUFBSUEsR0FBSixFQUFTO0FBQ1AsZUFBT0osTUFBTSxDQUFDSSxHQUFELENBQWI7QUFDRDs7QUFDREwsTUFBQUEsT0FBTztBQUNSLEtBTEQ7QUFNRCxHQVBZLENBQWI7QUFRRDs7QUFZRCxlQUFlTSxVQUFmLENBQTJCQyxTQUEzQixFQUFzQ0MsVUFBdEMsRUFBa0R2QixhQUFhLEdBQUcsRUFBbEUsRUFBc0U7QUFDcEUsTUFBSSxFQUFDLE1BQU13QixhQUFHQyxNQUFILENBQVVILFNBQVYsQ0FBUCxDQUFKLEVBQWlDO0FBQy9CLFVBQU0sSUFBSVosS0FBSixDQUFZLElBQUdZLFNBQVUsd0NBQXpCLENBQU47QUFDRDs7QUFDRCxRQUFNdkIsU0FBUyxHQUFHMkIsYUFBSUMsS0FBSixDQUFVSixVQUFWLENBQWxCOztBQUNBLFFBQU07QUFBQ0ssSUFBQUE7QUFBRCxNQUFTLE1BQU1KLGFBQUdLLElBQUgsQ0FBUVAsU0FBUixDQUFyQjs7QUFDQXJCLGtCQUFJNkIsSUFBSixDQUFVLGNBQWFSLFNBQVUsUUFBTyxnQ0FBcUJNLElBQXJCLENBQTJCLGFBQVlMLFVBQVcsTUFBMUY7O0FBQ0EsUUFBTVEsV0FBVyxHQUFHQyxPQUFPLENBQUNDLE1BQVIsRUFBcEI7O0FBQ0EsTUFBSSxDQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CQyxRQUFwQixDQUE2Qm5DLFNBQVMsQ0FBQ0ksUUFBdkMsQ0FBSixFQUFzRDtBQUNwRCxVQUFNTCxnQkFBZ0IsQ0FBQ0MsU0FBRCxFQUFZQyxhQUFaLENBQXRCO0FBQ0QsR0FGRCxNQUVPLElBQUlELFNBQVMsQ0FBQ0ksUUFBVixLQUF1QixNQUEzQixFQUFtQztBQUN4QyxVQUFNUyxlQUFlLENBQUMsMEJBQWlCVSxTQUFqQixDQUFELEVBQThCdkIsU0FBOUIsRUFBeUNDLGFBQXpDLENBQXJCO0FBQ0QsR0FGTSxNQUVBO0FBQ0wsVUFBTSxJQUFJVSxLQUFKLENBQVcsOEJBQTZCWSxTQUFVLFNBQVFDLFVBQVcsS0FBM0QsR0FDQyxnQ0FBK0J4QixTQUFTLENBQUNJLFFBQVMsS0FEbkQsR0FFQyxrREFGWCxDQUFOO0FBR0Q7O0FBQ0QsUUFBTWdDLFdBQVcsR0FBR0gsT0FBTyxDQUFDQyxNQUFSLENBQWVGLFdBQWYsRUFBNEIsQ0FBNUIsQ0FBcEI7O0FBQ0E5QixrQkFBSTZCLElBQUosQ0FBVSxhQUFZUixTQUFVLFFBQU8sZ0NBQXFCTSxJQUFyQixDQUEyQixZQUFXTyxXQUFZLFVBQVNBLFdBQVcsS0FBSyxDQUFoQixHQUFvQixFQUFwQixHQUF5QixHQUFJLEVBQS9IO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSZWFkU3RyZWFtIH0gZnJvbSAnZnMnO1xuaW1wb3J0IGZzIGZyb20gJy4vZnMnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdG9SZWFkYWJsZVNpemVTdHJpbmcgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0IEZ0cCBmcm9tICdqc2Z0cCc7XG5cblxuYXN5bmMgZnVuY3Rpb24gdXBsb2FkRmlsZVRvSHR0cCAocmVtb3RlVXJsLCB1cGxvYWRPcHRpb25zID0ge30pIHtcbiAgbG9nLmRlYnVnKGAke3JlbW90ZVVybC5wcm90b2NvbH0gdXBsb2FkIG9wdGlvbnM6ICR7SlNPTi5zdHJpbmdpZnkodXBsb2FkT3B0aW9ucyl9YCk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdCh1cGxvYWRPcHRpb25zKTtcbiAgY29uc3QgcmVzcG9uc2VEZWJ1Z01zZyA9IGBSZXNwb25zZSBjb2RlOiAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9LiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGBSZXNwb25zZSBib2R5OiAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmJvZHkpfWA7XG4gIGxvZy5kZWJ1ZyhyZXNwb25zZURlYnVnTXNnKTtcbiAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdXBsb2FkIHRoZSByZWNvcmRlZCBtZWRpYSB0byAnJHtyZW1vdGVVcmwuaHJlZn0nLiAke3Jlc3BvbnNlRGVidWdNc2d9YCk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBsb2FkRmlsZVRvRnRwIChsb2NhbEZpbGVTdHJlYW0sIHJlbW90ZVVybCwgdXBsb2FkT3B0aW9ucyA9IHt9KSB7XG4gIGxvZy5kZWJ1ZyhgJHtyZW1vdGVVcmwucHJvdG9jb2x9IHVwbG9hZCBvcHRpb25zOiAke0pTT04uc3RyaW5naWZ5KHVwbG9hZE9wdGlvbnMpfWApO1xuICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIG5ldyBGdHAodXBsb2FkT3B0aW9ucykucHV0KGxvY2FsRmlsZVN0cmVhbSwgcmVtb3RlVXJsLnBhdGhuYW1lLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogVXBsb2FkcyB0aGUgZ2l2ZW4gZmlsZSB0byBhIHJlbW90ZSBsb2NhdGlvbi4gSFRUUChTKSBhbmQgRlRQXG4gKiBwcm90b2NvbHMgYXJlIHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxQYXRoIC0gVGhlIHBhdGggdG8gYSBmaWxlIG9uIHRoZSBsb2NhbCBzdG9yYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZVBhdGggLSBUaGUgcmVtb3RlIFVSTCB0byB1cGxvYWQgdGhlIGZpbGUgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gdXBsb2FkT3B0aW9ucyAtIFRoZSBvcHRpb25zIHNldCwgd2hpY2ggZGVwZW5kcyBvbiB0aGUgcHJvdG9jb2wgc2V0IGZvciByZW1vdGVQYXRoLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWUgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVxdWVzdC1wcm9taXNlIGFuZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9qc2Z0cCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5hc3luYyBmdW5jdGlvbiB1cGxvYWRGaWxlIChsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIHVwbG9hZE9wdGlvbnMgPSB7fSkge1xuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhsb2NhbFBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yIChgJyR7bG9jYWxQYXRofScgZG9lcyBub3QgZXhpc3RzIG9yIGlzIG5vdCBhY2Nlc3NpYmxlYCk7XG4gIH1cbiAgY29uc3QgcmVtb3RlVXJsID0gdXJsLnBhcnNlKHJlbW90ZVBhdGgpO1xuICBjb25zdCB7c2l6ZX0gPSBhd2FpdCBmcy5zdGF0KGxvY2FsUGF0aCk7XG4gIGxvZy5pbmZvKGBVcGxvYWRpbmcgJyR7bG9jYWxQYXRofScgb2YgJHt0b1JlYWRhYmxlU2l6ZVN0cmluZyhzaXplKX0gc2l6ZSB0byAnJHtyZW1vdGVQYXRofScuLi5gKTtcbiAgY29uc3QgdGltZVN0YXJ0ZWQgPSBwcm9jZXNzLmhydGltZSgpO1xuICBpZiAoWydodHRwOicsICdodHRwczonXS5pbmNsdWRlcyhyZW1vdGVVcmwucHJvdG9jb2wpKSB7XG4gICAgYXdhaXQgdXBsb2FkRmlsZVRvSHR0cChyZW1vdGVVcmwsIHVwbG9hZE9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKHJlbW90ZVVybC5wcm90b2NvbCA9PT0gJ2Z0cDonKSB7XG4gICAgYXdhaXQgdXBsb2FkRmlsZVRvRnRwKGNyZWF0ZVJlYWRTdHJlYW0obG9jYWxQYXRoKSwgcmVtb3RlVXJsLCB1cGxvYWRPcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB1cGxvYWQgdGhlIGZpbGUgYXQgJyR7bG9jYWxQYXRofScgdG8gJyR7cmVtb3RlUGF0aH0nLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFVuc3VwcG9ydGVkIHJlbW90ZSBwcm90b2NvbCAnJHtyZW1vdGVVcmwucHJvdG9jb2x9Jy4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBPbmx5IGh0dHAvaHR0cHMgYW5kIGZ0cCBwcm90b2NvbHMgYXJlIHN1cHBvcnRlZC5gKTtcbiAgfVxuICBjb25zdCB0aW1lRWxhcHNlZCA9IHByb2Nlc3MuaHJ0aW1lKHRpbWVTdGFydGVkKVswXTtcbiAgbG9nLmluZm8oYFVwbG9hZGVkICcke2xvY2FsUGF0aH0nIG9mICR7dG9SZWFkYWJsZVNpemVTdHJpbmcoc2l6ZSl9IHNpemUgaW4gJHt0aW1lRWxhcHNlZH0gc2Vjb25kJHt0aW1lRWxhcHNlZCA9PT0gMSA/ICcnIDogJ3MnfWApO1xufVxuXG5leHBvcnQgeyB1cGxvYWRGaWxlIH07XG4iXSwiZmlsZSI6ImxpYi9uZXQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
