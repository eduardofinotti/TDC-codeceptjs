"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parsePlistFile = parsePlistFile;
exports.updatePlistFile = updatePlistFile;

require("source-map-support/register");

var _plist = _interopRequireDefault(require("plist"));

var _bplistCreator = _interopRequireDefault(require("bplist-creator"));

var _bplistParser = _interopRequireDefault(require("bplist-parser"));

var _fs = _interopRequireDefault(require("./fs"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

let parseFile = _bluebird.default.promisify(_bplistParser.default.parseFile);

async function parseXmlPlistFile(plistFilename) {
  let xmlContent = await _fs.default.readFile(plistFilename, 'utf8');
  return _plist.default.parse(xmlContent);
}

async function parsePlistFile(plist, mustExist = true, quiet = true) {
  if (!(await _fs.default.exists(plist))) {
    if (mustExist) {
      _logger.default.errorAndThrow(`Plist file doesn't exist: '${plist}'`);
    } else {
      _logger.default.debug(`Plist file '${plist}' does not exist. Returning an empty plist.`);

      return {};
    }
  }

  let obj = {};
  let type = 'binary';

  try {
    obj = await parseFile(plist);

    if (obj.length) {
      obj = obj[0];
    } else {
      throw new Error(`Binary file '${plist}'' appears to be empty`);
    }
  } catch (ign) {
    try {
      obj = await parseXmlPlistFile(plist);
      type = 'xml';
    } catch (err) {
      _logger.default.errorAndThrow(`Could not parse plist file '${plist}' as XML: ${err.message}`);
    }
  }

  if (!quiet) {
    _logger.default.debug(`Parsed plist file '${plist}' as ${type}`);
  }

  return obj;
}

async function updatePlistFile(plist, updatedFields, binary = true, mustExist = true, quiet = true) {
  let obj;

  try {
    obj = await parsePlistFile(plist, mustExist);
  } catch (err) {
    _logger.default.errorAndThrow(`Could not update plist: ${err.message}`);
  }

  _lodash.default.extend(obj, updatedFields);

  let newPlist = binary ? (0, _bplistCreator.default)(obj) : _plist.default.build(obj);

  try {
    await _fs.default.writeFile(plist, newPlist);
  } catch (err) {
    _logger.default.errorAndThrow(`Could not save plist: ${err.message}`);
  }

  if (!quiet) {
    _logger.default.debug(`Wrote plist file '${plist}'`);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wbGlzdC5qcyJdLCJuYW1lcyI6WyJwYXJzZUZpbGUiLCJCIiwicHJvbWlzaWZ5IiwiYnBsaXN0UGFyc2UiLCJwYXJzZVhtbFBsaXN0RmlsZSIsInBsaXN0RmlsZW5hbWUiLCJ4bWxDb250ZW50IiwiZnMiLCJyZWFkRmlsZSIsInhtbHBsaXN0IiwicGFyc2UiLCJwYXJzZVBsaXN0RmlsZSIsInBsaXN0IiwibXVzdEV4aXN0IiwicXVpZXQiLCJleGlzdHMiLCJsb2ciLCJlcnJvckFuZFRocm93IiwiZGVidWciLCJvYmoiLCJ0eXBlIiwibGVuZ3RoIiwiRXJyb3IiLCJpZ24iLCJlcnIiLCJtZXNzYWdlIiwidXBkYXRlUGxpc3RGaWxlIiwidXBkYXRlZEZpZWxkcyIsImJpbmFyeSIsIl8iLCJleHRlbmQiLCJuZXdQbGlzdCIsImJ1aWxkIiwid3JpdGVGaWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxTQUFTLEdBQUdDLGtCQUFFQyxTQUFGLENBQVlDLHNCQUFZSCxTQUF4QixDQUFoQjs7QUFHQSxlQUFlSSxpQkFBZixDQUFrQ0MsYUFBbEMsRUFBaUQ7QUFDL0MsTUFBSUMsVUFBVSxHQUFHLE1BQU1DLFlBQUdDLFFBQUgsQ0FBWUgsYUFBWixFQUEyQixNQUEzQixDQUF2QjtBQUNBLFNBQU9JLGVBQVNDLEtBQVQsQ0FBZUosVUFBZixDQUFQO0FBQ0Q7O0FBRUQsZUFBZUssY0FBZixDQUErQkMsS0FBL0IsRUFBc0NDLFNBQVMsR0FBRyxJQUFsRCxFQUF3REMsS0FBSyxHQUFHLElBQWhFLEVBQXNFO0FBRXBFLE1BQUksRUFBQyxNQUFNUCxZQUFHUSxNQUFILENBQVVILEtBQVYsQ0FBUCxDQUFKLEVBQTZCO0FBQzNCLFFBQUlDLFNBQUosRUFBZTtBQUNiRyxzQkFBSUMsYUFBSixDQUFtQiw4QkFBNkJMLEtBQU0sR0FBdEQ7QUFDRCxLQUZELE1BRU87QUFDTEksc0JBQUlFLEtBQUosQ0FBVyxlQUFjTixLQUFNLDZDQUEvQjs7QUFDQSxhQUFPLEVBQVA7QUFDRDtBQUNGOztBQUVELE1BQUlPLEdBQUcsR0FBRyxFQUFWO0FBQ0EsTUFBSUMsSUFBSSxHQUFHLFFBQVg7O0FBQ0EsTUFBSTtBQUNGRCxJQUFBQSxHQUFHLEdBQUcsTUFBTW5CLFNBQVMsQ0FBQ1ksS0FBRCxDQUFyQjs7QUFDQSxRQUFJTyxHQUFHLENBQUNFLE1BQVIsRUFBZ0I7QUFDZEYsTUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUMsQ0FBRCxDQUFUO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTSxJQUFJRyxLQUFKLENBQVcsZ0JBQWVWLEtBQU0sd0JBQWhDLENBQU47QUFDRDtBQUNGLEdBUEQsQ0FPRSxPQUFPVyxHQUFQLEVBQVk7QUFDWixRQUFJO0FBQ0ZKLE1BQUFBLEdBQUcsR0FBRyxNQUFNZixpQkFBaUIsQ0FBQ1EsS0FBRCxDQUE3QjtBQUNBUSxNQUFBQSxJQUFJLEdBQUcsS0FBUDtBQUNELEtBSEQsQ0FHRSxPQUFPSSxHQUFQLEVBQVk7QUFDWlIsc0JBQUlDLGFBQUosQ0FBbUIsK0JBQThCTCxLQUFNLGFBQVlZLEdBQUcsQ0FBQ0MsT0FBUSxFQUEvRTtBQUNEO0FBQ0Y7O0FBRUQsTUFBSSxDQUFDWCxLQUFMLEVBQVk7QUFDVkUsb0JBQUlFLEtBQUosQ0FBVyxzQkFBcUJOLEtBQU0sUUFBT1EsSUFBSyxFQUFsRDtBQUNEOztBQUNELFNBQU9ELEdBQVA7QUFDRDs7QUFFRCxlQUFlTyxlQUFmLENBQWdDZCxLQUFoQyxFQUF1Q2UsYUFBdkMsRUFBc0RDLE1BQU0sR0FBRyxJQUEvRCxFQUFxRWYsU0FBUyxHQUFHLElBQWpGLEVBQXVGQyxLQUFLLEdBQUcsSUFBL0YsRUFBcUc7QUFDbkcsTUFBSUssR0FBSjs7QUFDQSxNQUFJO0FBQ0ZBLElBQUFBLEdBQUcsR0FBRyxNQUFNUixjQUFjLENBQUNDLEtBQUQsRUFBUUMsU0FBUixDQUExQjtBQUNELEdBRkQsQ0FFRSxPQUFPVyxHQUFQLEVBQVk7QUFDWlIsb0JBQUlDLGFBQUosQ0FBbUIsMkJBQTBCTyxHQUFHLENBQUNDLE9BQVEsRUFBekQ7QUFDRDs7QUFDREksa0JBQUVDLE1BQUYsQ0FBU1gsR0FBVCxFQUFjUSxhQUFkOztBQUNBLE1BQUlJLFFBQVEsR0FBR0gsTUFBTSxHQUFHLDRCQUFhVCxHQUFiLENBQUgsR0FBdUJWLGVBQVN1QixLQUFULENBQWViLEdBQWYsQ0FBNUM7O0FBQ0EsTUFBSTtBQUNGLFVBQU1aLFlBQUcwQixTQUFILENBQWFyQixLQUFiLEVBQW9CbUIsUUFBcEIsQ0FBTjtBQUNELEdBRkQsQ0FFRSxPQUFPUCxHQUFQLEVBQVk7QUFDWlIsb0JBQUlDLGFBQUosQ0FBbUIseUJBQXdCTyxHQUFHLENBQUNDLE9BQVEsRUFBdkQ7QUFDRDs7QUFDRCxNQUFJLENBQUNYLEtBQUwsRUFBWTtBQUNWRSxvQkFBSUUsS0FBSixDQUFXLHFCQUFvQk4sS0FBTSxHQUFyQztBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeG1scGxpc3QgZnJvbSAncGxpc3QnO1xuaW1wb3J0IGJwbGlzdENyZWF0ZSBmcm9tICdicGxpc3QtY3JlYXRvcic7XG5pbXBvcnQgYnBsaXN0UGFyc2UgZnJvbSAnYnBsaXN0LXBhcnNlcic7XG5pbXBvcnQgZnMgZnJvbSAnLi9mcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxubGV0IHBhcnNlRmlsZSA9IEIucHJvbWlzaWZ5KGJwbGlzdFBhcnNlLnBhcnNlRmlsZSk7XG5cbi8vIFhNTCBQbGlzdCBsaWJyYXJ5IGhlbHBlclxuYXN5bmMgZnVuY3Rpb24gcGFyc2VYbWxQbGlzdEZpbGUgKHBsaXN0RmlsZW5hbWUpIHtcbiAgbGV0IHhtbENvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZShwbGlzdEZpbGVuYW1lLCAndXRmOCcpO1xuICByZXR1cm4geG1scGxpc3QucGFyc2UoeG1sQ29udGVudCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHBhcnNlUGxpc3RGaWxlIChwbGlzdCwgbXVzdEV4aXN0ID0gdHJ1ZSwgcXVpZXQgPSB0cnVlKSB7XG4gIC8vIGhhbmRsZSBub25leGlzdGFudCBmaWxlXG4gIGlmICghYXdhaXQgZnMuZXhpc3RzKHBsaXN0KSkge1xuICAgIGlmIChtdXN0RXhpc3QpIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KGBQbGlzdCBmaWxlIGRvZXNuJ3QgZXhpc3Q6ICcke3BsaXN0fSdgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKGBQbGlzdCBmaWxlICcke3BsaXN0fScgZG9lcyBub3QgZXhpc3QuIFJldHVybmluZyBhbiBlbXB0eSBwbGlzdC5gKTtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH1cblxuICBsZXQgb2JqID0ge307XG4gIGxldCB0eXBlID0gJ2JpbmFyeSc7XG4gIHRyeSB7XG4gICAgb2JqID0gYXdhaXQgcGFyc2VGaWxlKHBsaXN0KTtcbiAgICBpZiAob2JqLmxlbmd0aCkge1xuICAgICAgb2JqID0gb2JqWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEJpbmFyeSBmaWxlICcke3BsaXN0fScnIGFwcGVhcnMgdG8gYmUgZW1wdHlgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIHRyeSB7XG4gICAgICBvYmogPSBhd2FpdCBwYXJzZVhtbFBsaXN0RmlsZShwbGlzdCk7XG4gICAgICB0eXBlID0gJ3htbCc7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQ291bGQgbm90IHBhcnNlIHBsaXN0IGZpbGUgJyR7cGxpc3R9JyBhcyBYTUw6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFxdWlldCkge1xuICAgIGxvZy5kZWJ1ZyhgUGFyc2VkIHBsaXN0IGZpbGUgJyR7cGxpc3R9JyBhcyAke3R5cGV9YCk7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlUGxpc3RGaWxlIChwbGlzdCwgdXBkYXRlZEZpZWxkcywgYmluYXJ5ID0gdHJ1ZSwgbXVzdEV4aXN0ID0gdHJ1ZSwgcXVpZXQgPSB0cnVlKSB7XG4gIGxldCBvYmo7XG4gIHRyeSB7XG4gICAgb2JqID0gYXdhaXQgcGFyc2VQbGlzdEZpbGUocGxpc3QsIG11c3RFeGlzdCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgdXBkYXRlIHBsaXN0OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIF8uZXh0ZW5kKG9iaiwgdXBkYXRlZEZpZWxkcyk7XG4gIGxldCBuZXdQbGlzdCA9IGJpbmFyeSA/IGJwbGlzdENyZWF0ZShvYmopIDogeG1scGxpc3QuYnVpbGQob2JqKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUocGxpc3QsIG5ld1BsaXN0KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBzYXZlIHBsaXN0OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIGlmICghcXVpZXQpIHtcbiAgICBsb2cuZGVidWcoYFdyb3RlIHBsaXN0IGZpbGUgJyR7cGxpc3R9J2ApO1xuICB9XG59XG5cbmV4cG9ydCB7IHBhcnNlUGxpc3RGaWxlLCB1cGRhdGVQbGlzdEZpbGUgfTtcbiJdLCJmaWxlIjoibGliL3BsaXN0LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
