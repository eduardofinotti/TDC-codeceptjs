"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SubProcess = void 0;

require("source-map-support/register");

var _child_process = require("child_process");

var _events = _interopRequireDefault(require("events"));

var _through = _interopRequireDefault(require("through"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _shellQuote = require("shell-quote");

var _lodash = _interopRequireDefault(require("lodash"));

const {
  EventEmitter
} = _events.default;

class SubProcess extends EventEmitter {
  constructor(cmd, args = [], opts = {}) {
    super();
    if (!cmd) throw new Error('Command is required');
    if (!_lodash.default.isString(cmd)) throw new Error('Command must be a string');
    if (!_lodash.default.isArray(args)) throw new Error('Args must be an array');
    this.cmd = cmd;
    this.args = args;
    this.proc = null;
    this.opts = opts;
    this.expectingExit = false;
    this.rep = (0, _shellQuote.quote)([cmd, ...args]);
  }

  get isRunning() {
    return !!this.proc;
  }

  emitLines(stream, lines) {
    for (let line of lines) {
      this.emit('stream-line', `[${stream.toUpperCase()}] ${line}`);
    }
  }

  async start(startDetector = null, timeoutMs = null, detach = false) {
    let startDelay = 10;

    const genericStartDetector = function genericStartDetector(stdout, stderr) {
      return stdout || stderr;
    };

    if (startDetector === null) {
      startDetector = genericStartDetector;
    }

    if (_lodash.default.isNumber(startDetector)) {
      startDelay = startDetector;
      startDetector = null;
    }

    if (_lodash.default.isBoolean(startDetector) && startDetector) {
      if (!this.opts.detached) {
        throw new Error(`Unable to detach process that is not started with 'detached' option`);
      }

      detach = true;
      startDetector = genericStartDetector;
    } else if (_lodash.default.isBoolean(timeoutMs) && timeoutMs) {
      if (!this.opts.detached) {
        throw new Error(`Unable to detach process that is not started with 'detached' option`);
      }

      detach = true;
      timeoutMs = null;
    }

    return await new _bluebird.default((resolve, reject) => {
      this.proc = (0, _child_process.spawn)(this.cmd, this.args, this.opts);

      if (this.proc.stdout) {
        this.proc.stdout.setEncoding(this.opts.encoding || 'utf8');
      }

      if (this.proc.stderr) {
        this.proc.stderr.setEncoding(this.opts.encoding || 'utf8');
      }

      this.lastLinePortion = {
        stdout: '',
        stderr: ''
      };

      const handleOutput = data => {
        try {
          if (startDetector && startDetector(data.stdout, data.stderr)) {
            startDetector = null;
            resolve();
          }
        } catch (e) {
          reject(e);
        }

        this.emit('output', data.stdout, data.stderr);

        for (const stream of ['stdout', 'stderr']) {
          if (!data[stream]) continue;
          let lines = data[stream].split("\n");

          if (lines.length > 1) {
            let retLines = lines.slice(0, -1);
            retLines[0] = this.lastLinePortion[stream] + retLines[0];
            this.lastLinePortion[stream] = lines[lines.length - 1];
            this.emit(`lines-${stream}`, retLines);
            this.emitLines(stream, retLines);
          } else {
            this.lastLinePortion[stream] += lines[0];
          }
        }
      };

      this.proc.on('error', err => {
        this.proc.removeAllListeners('exit');
        this.proc.kill('SIGINT');

        if (err.errno === 'ENOENT') {
          err = new Error(`Command '${this.cmd}' not found. Is it installed?`);
        }

        reject(err);
      });

      if (this.proc.stdout) {
        this.proc.stdout.pipe((0, _through.default)(stdout => {
          handleOutput({
            stdout,
            stderr: ''
          });
        }));
      }

      if (this.proc.stderr) {
        this.proc.stderr.pipe((0, _through.default)(stderr => {
          handleOutput({
            stdout: '',
            stderr
          });
        }));
      }

      this.proc.on('exit', (code, signal) => {
        this.handleLastLines();
        this.emit('exit', code, signal);
        let event = this.expectingExit ? 'stop' : 'die';

        if (!this.expectingExit && code === 0) {
          event = 'end';
        }

        this.emit(event, code, signal);
        this.proc = null;
        this.expectingExit = false;
      });

      if (!startDetector) {
        setTimeout(() => {
          resolve();
        }, startDelay);
      }

      if (_lodash.default.isNumber(timeoutMs)) {
        setTimeout(() => {
          reject(new Error(`The process did not start within ${timeoutMs}ms ` + `(cmd: '${this.rep}')`));
        }, timeoutMs);
      }
    }).finally(() => {
      if (detach && this.proc) {
        this.proc.unref();
      }
    });
  }

  handleLastLines() {
    for (let stream of ['stdout', 'stderr']) {
      if (this.lastLinePortion[stream]) {
        const lastLines = [this.lastLinePortion[stream]];
        this.emit(`lines-${stream}`, lastLines);
        this.emitLines(stream, lastLines);
        this.lastLinePortion[stream] = '';
      }
    }
  }

  async stop(signal = 'SIGTERM', timeout = 10000) {
    if (!this.isRunning) {
      throw new Error(`Can't stop process; it's not currently running (cmd: '${this.rep}')`);
    }

    this.handleLastLines();
    return await new _bluebird.default((resolve, reject) => {
      this.proc.on('close', resolve);
      this.expectingExit = true;
      this.proc.kill(signal);
      setTimeout(() => {
        reject(new Error(`Process didn't end after ${timeout}ms (cmd: '${this.rep}')`));
      }, timeout);
    });
  }

  async join(allowedExitCodes = [0]) {
    if (!this.isRunning) {
      throw new Error(`Cannot join process; it is not currently running (cmd: '${this.rep}')`);
    }

    return await new _bluebird.default((resolve, reject) => {
      this.proc.on('exit', code => {
        if (allowedExitCodes.indexOf(code) === -1) {
          reject(new Error(`Process ended with exitcode ${code} (cmd: '${this.rep}')`));
        } else {
          resolve(code);
        }
      });
    });
  }

  detachProcess() {
    if (!this.opts.detached) {
      throw new Error(`Unable to detach process that is not started with 'detached' option`);
    }

    if (this.proc) {
      this.proc.unref();
    }
  }

  get pid() {
    return this.proc ? this.proc.pid : null;
  }

}

exports.SubProcess = SubProcess;
var _default = SubProcess;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
