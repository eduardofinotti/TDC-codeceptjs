"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sleep = sleep;
exports.retry = retry;
exports.nodeify = nodeify;
exports.nodeifyAll = nodeifyAll;
exports.retryInterval = retryInterval;
exports.asyncify = asyncify;
exports.parallel = parallel;
exports.asyncmap = asyncmap;
exports.asyncfilter = asyncfilter;
exports.waitForCondition = waitForCondition;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _es6Mapify = require("es6-mapify");

var _lodash = _interopRequireDefault(require("lodash"));

function sleep(_x) {
  return _sleep.apply(this, arguments);
}

function _sleep() {
  _sleep = (0, _asyncToGenerator2.default)(function* (ms) {
    return yield _bluebird.default.delay(ms);
  });
  return _sleep.apply(this, arguments);
}

function retry(_x2, _x3) {
  return _retry.apply(this, arguments);
}

function _retry() {
  _retry = (0, _asyncToGenerator2.default)(function* (times, fn, ...args) {
    let tries = 0;
    let done = false;
    let res = null;

    while (!done && tries < times) {
      tries++;

      try {
        res = yield fn(...args);
        done = true;
      } catch (err) {
        if (tries >= times) {
          throw err;
        }
      }
    }

    return res;
  });
  return _retry.apply(this, arguments);
}

function retryInterval(_x4, _x5, _x6) {
  return _retryInterval.apply(this, arguments);
}

function _retryInterval() {
  _retryInterval = (0, _asyncToGenerator2.default)(function* (times, sleepMs, fn, ...args) {
    let count = 0;

    let wrapped = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        count++;
        let res;

        try {
          res = yield fn(...args);
        } catch (e) {
          if (count !== times) {
            yield sleep(sleepMs);
          }

          throw e;
        }

        return res;
      });

      return function wrapped() {
        return _ref.apply(this, arguments);
      };
    }();

    return yield retry(times, wrapped);
  });
  return _retryInterval.apply(this, arguments);
}

function parallel(_x7) {
  return _parallel.apply(this, arguments);
}

function _parallel() {
  _parallel = (0, _asyncToGenerator2.default)(function* (promises) {
    return yield _bluebird.default.all(promises);
  });
  return _parallel.apply(this, arguments);
}

function nodeify(promisey, cb) {
  return _bluebird.default.resolve(promisey).nodeify(cb);
}

function nodeifyAll(promiseyMap) {
  let cbMap = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _es6Mapify.mapify)(promiseyMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          name = _step$value[0],
          fn = _step$value[1];

      cbMap[name] = function (...args) {
        let _cb = args.slice(-1)[0];
        args = args.slice(0, -1);
        nodeify(fn(...args), _cb);
      };
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return cbMap;
}

function asyncify(fn, ...args) {
  _bluebird.default.resolve(fn(...args)).done();
}

function asyncmap(_x8, _x9) {
  return _asyncmap.apply(this, arguments);
}

function _asyncmap() {
  _asyncmap = (0, _asyncToGenerator2.default)(function* (coll, mapper, runInParallel = true) {
    if (runInParallel) {
      return parallel(coll.map(mapper));
    }

    let newColl = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = coll[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let item = _step2.value;
        newColl.push((yield mapper(item)));
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return newColl;
  });
  return _asyncmap.apply(this, arguments);
}

function asyncfilter(_x10, _x11) {
  return _asyncfilter.apply(this, arguments);
}

function _asyncfilter() {
  _asyncfilter = (0, _asyncToGenerator2.default)(function* (coll, filter, runInParallel = true) {
    let newColl = [];

    if (runInParallel) {
      let bools = yield parallel(coll.map(filter));

      for (let i = 0; i < coll.length; i++) {
        if (bools[i]) {
          newColl.push(coll[i]);
        }
      }
    } else {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = coll[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          let item = _step3.value;

          if (yield filter(item)) {
            newColl.push(item);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    return newColl;
  });
  return _asyncfilter.apply(this, arguments);
}

function waitForCondition(_x12) {
  return _waitForCondition.apply(this, arguments);
}

function _waitForCondition() {
  _waitForCondition = (0, _asyncToGenerator2.default)(function* (condFn, opts = {}) {
    _lodash.default.defaults(opts, {
      waitMs: 5000,
      intervalMs: 500
    });

    let debug = opts.logger ? opts.logger.debug.bind(opts.logger) : _lodash.default.noop;
    let begunAt = Date.now();
    let endAt = begunAt + opts.waitMs;

    let spin = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        const result = yield condFn();

        if (result) {
          return result;
        }

        let now = Date.now();
        let waited = now - begunAt;

        if (now < endAt) {
          debug(`Waited for ${waited} ms so far`);
          yield _bluebird.default.delay(opts.intervalMs);
          return yield spin();
        }

        throw new Error(`Condition unmet after ${waited} ms. Timing out.`);
      });

      return function spin() {
        return _ref2.apply(this, arguments);
      };
    }();

    return yield spin();
  });
  return _waitForCondition.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
