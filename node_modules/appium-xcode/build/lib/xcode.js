"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVersion = getVersion;
exports.getAutomationTraceTemplatePathWithoutRetry = getAutomationTraceTemplatePathWithoutRetry;
exports.getMaxIOSSDKWithoutRetry = getMaxIOSSDKWithoutRetry;
exports.getConnectedDevices = getConnectedDevices;
exports.clearInternalCache = clearInternalCache;
exports.getCommandLineToolsVersion = getCommandLineToolsVersion;
exports.getMaxTVOSSDKWithoutRetry = getMaxTVOSSDKWithoutRetry;
exports.getMaxTVOSSDK = exports.getInstrumentsPath = exports.getMaxIOSSDK = exports.getAutomationTraceTemplatePath = exports.getPath = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _plist = require("plist");

var _teen_process = require("teen_process");

var _semver = _interopRequireDefault(require("semver"));

const env = process.env;
const XCRUN_TIMEOUT = 15000;
const XCODE_SUBDIR = "/Contents/Developer";
const DEFAULT_NUMBER_OF_RETRIES = 3;

const log = _appiumSupport.logger.getLogger('Xcode');

function hasExpectedSubDir(path) {
  return path.substring(path.length - XCODE_SUBDIR.length) === XCODE_SUBDIR;
}

function runXcrunCommand(_x) {
  return _runXcrunCommand.apply(this, arguments);
}

function _runXcrunCommand() {
  _runXcrunCommand = (0, _asyncToGenerator2.default)(function* (args, timeout = XCRUN_TIMEOUT) {
    try {
      return yield (0, _teen_process.exec)('xcrun', args, {
        timeout
      });
    } catch (err) {
      if (err.stderr) {
        err.message = `${err.message}: ${err.stderr}`;
      }

      throw err;
    }
  });
  return _runXcrunCommand.apply(this, arguments);
}

function getPathFromSymlink(_x2) {
  return _getPathFromSymlink.apply(this, arguments);
}

function _getPathFromSymlink() {
  _getPathFromSymlink = (0, _asyncToGenerator2.default)(function* (failMessage) {
    log.warn(`Finding XcodePath by symlink because ${failMessage}`);
    const symlinkPath = "/var/db/xcode_select_link";
    const legacySymlinkPath = "/usr/share/xcode-select/xcode_dir_link";
    let xcodePath = null;

    if (_appiumSupport.util.hasContent(env.DEVELOPER_DIR)) {
      const customPath = hasExpectedSubDir(env.DEVELOPER_DIR) ? env.DEVELOPER_DIR : env.DEVELOPER_DIR + XCODE_SUBDIR;

      if (yield _appiumSupport.fs.exists(customPath)) {
        xcodePath = customPath;
      } else {
        let mesg = `Could not find path to Xcode, environment variable ` + `DEVELOPER_DIR set to: ${env.DEVELOPER_DIR} ` + `but no Xcode found`;
        log.warn(mesg);
        throw new Error(mesg);
      }
    } else if (yield _appiumSupport.fs.exists(symlinkPath)) {
      xcodePath = yield _appiumSupport.fs.readlink(symlinkPath);
    } else if (yield _appiumSupport.fs.exists(legacySymlinkPath)) {
      xcodePath = yield _appiumSupport.fs.readlink(legacySymlinkPath);
    }

    if (xcodePath) {
      return xcodePath.replace(new RegExp("/$"), "").trim();
    }

    let msg = `Could not find path to Xcode by symlinks located in ${symlinkPath}, or ${legacySymlinkPath}`;
    log.warn(msg);
    throw new Error(msg);
  });
  return _getPathFromSymlink.apply(this, arguments);
}

function getPathFromXcodeSelect() {
  return _getPathFromXcodeSelect.apply(this, arguments);
}

function _getPathFromXcodeSelect() {
  _getPathFromXcodeSelect = (0, _asyncToGenerator2.default)(function* (timeout = XCRUN_TIMEOUT) {
    let _ref = yield (0, _teen_process.exec)('xcode-select', ['--print-path'], {
      timeout
    }),
        stdout = _ref.stdout;

    const xcodeFolderPath = stdout.replace(/\/$/, '').trim();

    if (!_appiumSupport.util.hasContent(xcodeFolderPath)) {
      log.errorAndThrow('xcode-select returned an empty string');
    }

    if (yield _appiumSupport.fs.exists(xcodeFolderPath)) {
      return xcodeFolderPath;
    } else {
      const msg = `xcode-select could not find xcode. Path '${xcodeFolderPath}' does not exist.`;
      log.errorAndThrow(msg);
    }
  });
  return _getPathFromXcodeSelect.apply(this, arguments);
}

const getPath = _lodash.default.memoize(function (timeout = XCRUN_TIMEOUT) {
  return getPathFromXcodeSelect(timeout).catch(getPathFromSymlink);
});

exports.getPath = getPath;

function getVersionWithoutRetry() {
  return _getVersionWithoutRetry.apply(this, arguments);
}

function _getVersionWithoutRetry() {
  _getVersionWithoutRetry = (0, _asyncToGenerator2.default)(function* (timeout = XCRUN_TIMEOUT) {
    const xcodePath = yield getPath(timeout);

    const plistPath = _path.default.resolve(xcodePath, "..", "Info.plist");

    if (!(yield _appiumSupport.fs.exists(plistPath))) {
      throw new Error(`Could not get Xcode version. ${plistPath} does not exist on disk.`);
    }

    const version = yield _appiumSupport.plist.parsePlistFile(plistPath);
    return _semver.default.coerce(version.CFBundleShortVersionString);
  });
  return _getVersionWithoutRetry.apply(this, arguments);
}

const getVersionMemoized = _lodash.default.memoize(function (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getVersionWithoutRetry, timeout);
});

function getVersion() {
  return _getVersion.apply(this, arguments);
}

function _getVersion() {
  _getVersion = (0, _asyncToGenerator2.default)(function* (parse = false, retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
    const version = yield getVersionMemoized(retries, timeout);
    const versionString = version.patch > 0 ? version.version : `${version.major}.${version.minor}`;

    if (!parse) {
      return versionString;
    }

    return {
      versionString,
      versionFloat: parseFloat(versionString),
      major: version.major,
      minor: version.minor,
      patch: version.patch > 0 ? version.patch : undefined
    };
  });
  return _getVersion.apply(this, arguments);
}

function getCommandLineToolsVersion() {
  return _getCommandLineToolsVersion.apply(this, arguments);
}

function _getCommandLineToolsVersion() {
  _getCommandLineToolsVersion = (0, _asyncToGenerator2.default)(function* () {
    const getVersionFunctions = [(0, _asyncToGenerator2.default)(function* () {
      let pkg = (yield (0, _teen_process.exec)('pkgutil', ['--pkgs=com.apple.pkg.DevSDK_.*'])).stdout;
      return (yield (0, _teen_process.exec)('pkgutil', [`--pkg-info=${pkg.trim()}`])).stdout;
    }), (0, _asyncToGenerator2.default)(function* () {
      return (yield (0, _teen_process.exec)('pkgutil', [`--pkg-info=com.apple.pkg.CLTools_Executables`])).stdout;
    }), (0, _asyncToGenerator2.default)(function* () {
      return (yield (0, _teen_process.exec)('pkgutil', [`--pkg-info=com.apple.pkg.DeveloperToolsCLI`])).stdout;
    })];
    let stdout;

    for (var _i = 0; _i < getVersionFunctions.length; _i++) {
      let getVersion = getVersionFunctions[_i];

      try {
        stdout = yield getVersion();
        break;
      } catch (ign) {
        stdout = '';
      }
    }

    let match = /^version: (.+)$/m.exec(stdout);
    return match ? match[1] : undefined;
  });
  return _getCommandLineToolsVersion.apply(this, arguments);
}

function getAutomationTraceTemplatePathWithoutRetry() {
  return _getAutomationTraceTemplatePathWithoutRetry.apply(this, arguments);
}

function _getAutomationTraceTemplatePathWithoutRetry() {
  _getAutomationTraceTemplatePathWithoutRetry = (0, _asyncToGenerator2.default)(function* (timeout = XCRUN_TIMEOUT) {
    const xcodePath = yield getPath(timeout);
    const extensions = ['xrplugin', 'bundle'];

    const pathPrefix = _path.default.resolve(xcodePath, "../Applications/Instruments.app/Contents/PlugIns");

    const pathSuffix = "Contents/Resources/Automation.tracetemplate";
    let automationTraceTemplatePaths = [_path.default.resolve(pathPrefix, `AutomationInstrument.${extensions[0]}`, pathSuffix), _path.default.resolve(pathPrefix, `AutomationInstrument.${extensions[1]}`, pathSuffix)];

    if (yield _appiumSupport.fs.exists(automationTraceTemplatePaths[0])) {
      return automationTraceTemplatePaths[0];
    }

    if (yield _appiumSupport.fs.exists(automationTraceTemplatePaths[1])) {
      return automationTraceTemplatePaths[1];
    }

    const msg = "Could not find Automation.tracetemplate in any of the following" + `locations ${automationTraceTemplatePaths.toString()}`;
    log.error(msg);
    throw new Error(msg);
  });
  return _getAutomationTraceTemplatePathWithoutRetry.apply(this, arguments);
}

const getAutomationTraceTemplatePath = _lodash.default.memoize(function (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getAutomationTraceTemplatePathWithoutRetry, timeout);
});

exports.getAutomationTraceTemplatePath = getAutomationTraceTemplatePath;

function getMaxIOSSDKWithoutRetry() {
  return _getMaxIOSSDKWithoutRetry.apply(this, arguments);
}

function _getMaxIOSSDKWithoutRetry() {
  _getMaxIOSSDKWithoutRetry = (0, _asyncToGenerator2.default)(function* (timeout = XCRUN_TIMEOUT) {
    const version = yield getVersion(false, DEFAULT_NUMBER_OF_RETRIES, timeout);

    if (version[0] === '4') {
      return '6.1';
    }

    const args = ['--sdk', 'iphonesimulator', '--show-sdk-version'];

    const _ref5 = yield runXcrunCommand(args, timeout),
          stdout = _ref5.stdout;

    const sdkVersion = stdout.trim();
    const match = /\d.\d/.exec(stdout);

    if (!match) {
      throw new Error(`xcrun returned a non-numeric iOS SDK version: '${sdkVersion}'`);
    }

    return sdkVersion;
  });
  return _getMaxIOSSDKWithoutRetry.apply(this, arguments);
}

const getMaxIOSSDK = _lodash.default.memoize(function (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getMaxIOSSDKWithoutRetry, timeout);
});

exports.getMaxIOSSDK = getMaxIOSSDK;

function getMaxTVOSSDKWithoutRetry() {
  return _getMaxTVOSSDKWithoutRetry.apply(this, arguments);
}

function _getMaxTVOSSDKWithoutRetry() {
  _getMaxTVOSSDKWithoutRetry = (0, _asyncToGenerator2.default)(function* (timeout = XCRUN_TIMEOUT) {
    const args = ['--sdk', 'appletvsimulator', '--show-sdk-version'];

    const _ref6 = yield runXcrunCommand(args, timeout),
          stdout = _ref6.stdout;

    const sdkVersion = stdout.trim();

    if (isNaN(parseFloat(sdkVersion))) {
      throw new Error(`xcrun returned a non-numeric tvOS SDK version: '${sdkVersion}'`);
    }

    return sdkVersion;
  });
  return _getMaxTVOSSDKWithoutRetry.apply(this, arguments);
}

const getMaxTVOSSDK = _lodash.default.memoize(function (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getMaxTVOSSDKWithoutRetry, timeout);
});

exports.getMaxTVOSSDK = getMaxTVOSSDK;

function getConnectedDevices() {
  return _getConnectedDevices.apply(this, arguments);
}

function _getConnectedDevices() {
  _getConnectedDevices = (0, _asyncToGenerator2.default)(function* (timeout = XCRUN_TIMEOUT) {
    const cmd = '/usr/sbin/system_profiler';
    const args = ['-xml', 'SPUSBDataType'];

    let _ref7 = yield (0, _teen_process.exec)(cmd, args, {
      timeout
    }),
        stdout = _ref7.stdout;

    let plistContent = (0, _plist.parse)(stdout);
    let devicesFound = [];
    let entriesToSearch = [plistContent[0]];

    while (entriesToSearch.length > 0) {
      let currentEntry = entriesToSearch.pop();

      if (currentEntry instanceof Array) {
        entriesToSearch = entriesToSearch.concat(currentEntry);
      } else if (currentEntry._name && currentEntry._name.substring(0, 4) === "iPad" || currentEntry._name && currentEntry._name.substring(0, 6) === "iPhone" || currentEntry._name && _lodash.default.includes(currentEntry._name, "Apple TV")) {
        let deviceInfo = {
          name: currentEntry._name,
          udid: currentEntry.serial_num,
          productId: currentEntry.product_id,
          deviceVersion: currentEntry.bcd_device
        };
        devicesFound.push(deviceInfo);
      } else if (currentEntry._items) {
        entriesToSearch = entriesToSearch.concat(currentEntry._items);
      }
    }

    return devicesFound;
  });
  return _getConnectedDevices.apply(this, arguments);
}

function getInstrumentsPathWithoutRetry() {
  return _getInstrumentsPathWithoutRetry.apply(this, arguments);
}

function _getInstrumentsPathWithoutRetry() {
  _getInstrumentsPathWithoutRetry = (0, _asyncToGenerator2.default)(function* (timeout = XCRUN_TIMEOUT) {
    const args = ['-find', 'instruments'];

    let _ref8 = yield runXcrunCommand(args, timeout),
        stdout = _ref8.stdout;

    if (!stdout) {
      stdout = "";
    }

    let instrumentsPath = stdout.trim();

    if (!instrumentsPath) {
      throw new Error(`Could not find path to instruments binary using 'xcrun ${args.join(' ')}'`);
    }

    return instrumentsPath;
  });
  return _getInstrumentsPathWithoutRetry.apply(this, arguments);
}

const getInstrumentsPath = _lodash.default.memoize(function (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getInstrumentsPathWithoutRetry, timeout);
});

exports.getInstrumentsPath = getInstrumentsPath;

function clearInternalCache() {
  const memoized = [getPath, getVersionMemoized, getAutomationTraceTemplatePath, getMaxIOSSDK, getMaxTVOSSDK, getInstrumentsPath];
  memoized.forEach(f => {
    if (f.cache) {
      f.cache = new _lodash.default.memoize.Cache();
    }
  });
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
