"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = authorize;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _glob2 = _interopRequireDefault(require("glob"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const glob = _bluebird.default.promisify(_glob2.default);

const log = _appiumSupport.logger.getLogger('AuthorizeIOS');

function authorize(_x) {
  return _authorize.apply(this, arguments);
}

function _authorize() {
  _authorize = (0, _asyncToGenerator2.default)(function* (insecure) {
    let xcodeDir;
    let user;

    try {
      log.info('Enabling DevToolsSecurity');
      yield (0, _teen_process.exec)('DevToolsSecurity', ['--enable']);
      log.info(`Updating security db for ${insecure ? 'insecure' : 'developer'} access`);
      const cmd = 'security';
      const args = ['authorizationdb', 'write', 'system.privilege.taskport', insecure ? 'allow' : 'is-developer'];
      yield (0, _teen_process.exec)(cmd, args);
      log.info('Granting access to built-in simulator apps');

      if (!process.env.HOME) {
        throw new Error('Could not determine your $HOME');
      }

      user = /\/([^/]+)$/.exec(process.env.HOME)[1];
      xcodeDir = yield _appiumXcode.default.getPath();
      log.info(`The xcode directory is: ${xcodeDir}`);
    } catch (e) {
      log.errorAndThrow(e);
    }

    let olderXcodeSimulatorPath = _path.default.resolve(xcodeDir, 'Platforms/iPhoneSimulator.platform/' + 'Developer/SDKs/iPhoneSimulator*.sdk/Applications');

    let directories = yield glob(olderXcodeSimulatorPath);

    let newerXcodeSimulatorPath = _path.default.resolve('/Library/Developer/CoreSimulator/' + 'Profiles/Runtimes/iOS *.simruntime/' + 'Contents/Resources/RuntimeRoot/Applications/');

    directories = directories.concat((yield glob(newerXcodeSimulatorPath)));
    directories = directories.filter(function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (dir) {
        return yield _appiumSupport.fs.exists(dir);
      });

      return function (_x2) {
        return _ref.apply(this, arguments);
      };
    }());
    let args = ['-R', `${user}:`, ...directories];
    log.info(`Changing ownership to '${user}' on directories: ${directories.join(', ')}`);

    try {
      yield (0, _teen_process.exec)('chown', args);
    } catch (err) {
      log.error(`Encountered an issue changing user priveledges ` + `for iOS sim app dirs: ${directories}`);
      log.error(`Error was: ${err.message}`);
    }
  });
  return _authorize.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hdXRob3JpemUuanMiXSwibmFtZXMiOlsiZ2xvYiIsIkIiLCJwcm9taXNpZnkiLCJfZ2xvYiIsImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImF1dGhvcml6ZSIsImluc2VjdXJlIiwieGNvZGVEaXIiLCJ1c2VyIiwiaW5mbyIsImNtZCIsImFyZ3MiLCJwcm9jZXNzIiwiZW52IiwiSE9NRSIsIkVycm9yIiwiZXhlYyIsInhjb2RlIiwiZ2V0UGF0aCIsImUiLCJlcnJvckFuZFRocm93Iiwib2xkZXJYY29kZVNpbXVsYXRvclBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImRpcmVjdG9yaWVzIiwibmV3ZXJYY29kZVNpbXVsYXRvclBhdGgiLCJjb25jYXQiLCJmaWx0ZXIiLCJkaXIiLCJmcyIsImV4aXN0cyIsImpvaW4iLCJlcnIiLCJlcnJvciIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsSUFBSSxHQUFHQyxrQkFBRUMsU0FBRixDQUFZQyxjQUFaLENBQWI7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHQyxzQkFBT0MsU0FBUCxDQUFpQixjQUFqQixDQUFaOztTQUU4QkMsUzs7Ozs7K0NBQWYsV0FBMEJDLFFBQTFCLEVBQW9DO0FBQ2pELFFBQUlDLFFBQUo7QUFDQSxRQUFJQyxJQUFKOztBQUVBLFFBQUk7QUFFRk4sTUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVMsMkJBQVQ7QUFDQSxZQUFNLHdCQUFLLGtCQUFMLEVBQXlCLENBQUMsVUFBRCxDQUF6QixDQUFOO0FBRUFQLE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFVLDRCQUEyQkgsUUFBUSxHQUFHLFVBQUgsR0FBZ0IsV0FBWSxTQUF6RTtBQUNBLFlBQU1JLEdBQUcsR0FBRyxVQUFaO0FBQ0EsWUFBTUMsSUFBSSxHQUFHLENBQ1gsaUJBRFcsRUFDUSxPQURSLEVBQ2lCLDJCQURqQixFQUVWTCxRQUFRLEdBQUcsT0FBSCxHQUFhLGNBRlgsQ0FBYjtBQUlBLFlBQU0sd0JBQUtJLEdBQUwsRUFBVUMsSUFBVixDQUFOO0FBRUFULE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFTLDRDQUFUOztBQUNBLFVBQUksQ0FBQ0csT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQWpCLEVBQXVCO0FBQ3JCLGNBQU0sSUFBSUMsS0FBSixDQUFVLGdDQUFWLENBQU47QUFDRDs7QUFFRFAsTUFBQUEsSUFBSSxHQUFHLGFBQWFRLElBQWIsQ0FBa0JKLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUE5QixFQUFvQyxDQUFwQyxDQUFQO0FBQ0FQLE1BQUFBLFFBQVEsU0FBU1UscUJBQU1DLE9BQU4sRUFBakI7QUFDQWhCLE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFVLDJCQUEwQkYsUUFBUyxFQUE3QztBQUNELEtBckJELENBcUJFLE9BQU9ZLENBQVAsRUFBVTtBQUNWakIsTUFBQUEsR0FBRyxDQUFDa0IsYUFBSixDQUFrQkQsQ0FBbEI7QUFDRDs7QUFHRCxRQUFJRSx1QkFBdUIsR0FBR0MsY0FBS0MsT0FBTCxDQUFhaEIsUUFBYixFQUNGLHdDQUNBLGtEQUZFLENBQTlCOztBQUdBLFFBQUlpQixXQUFXLFNBQVMxQixJQUFJLENBQUN1Qix1QkFBRCxDQUE1Qjs7QUFFQSxRQUFJSSx1QkFBdUIsR0FBR0gsY0FBS0MsT0FBTCxDQUFhLHNDQUNmLHFDQURlLEdBRWYsOENBRkUsQ0FBOUI7O0FBR0FDLElBQUFBLFdBQVcsR0FBR0EsV0FBVyxDQUFDRSxNQUFaLFFBQXlCNUIsSUFBSSxDQUFDMkIsdUJBQUQsQ0FBN0IsRUFBZDtBQUVBRCxJQUFBQSxXQUFXLEdBQUdBLFdBQVcsQ0FBQ0csTUFBWjtBQUFBLGlEQUFtQixXQUFPQyxHQUFQLEVBQWU7QUFDOUMscUJBQWFDLGtCQUFHQyxNQUFILENBQVVGLEdBQVYsQ0FBYjtBQUNELE9BRmE7O0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFBZDtBQUlBLFFBQUlqQixJQUFJLEdBQUcsQ0FBQyxJQUFELEVBQVEsR0FBRUgsSUFBSyxHQUFmLEVBQW1CLEdBQUdnQixXQUF0QixDQUFYO0FBRUF0QixJQUFBQSxHQUFHLENBQUNPLElBQUosQ0FBVSwwQkFBeUJELElBQUsscUJBQW9CZ0IsV0FBVyxDQUFDTyxJQUFaLENBQWlCLElBQWpCLENBQXVCLEVBQW5GOztBQUNBLFFBQUk7QUFDRixZQUFNLHdCQUFLLE9BQUwsRUFBY3BCLElBQWQsQ0FBTjtBQUNELEtBRkQsQ0FFRSxPQUFPcUIsR0FBUCxFQUFZO0FBQ1o5QixNQUFBQSxHQUFHLENBQUMrQixLQUFKLENBQVcsaURBQUQsR0FDSSx5QkFBd0JULFdBQVksRUFEbEQ7QUFFQXRCLE1BQUFBLEdBQUcsQ0FBQytCLEtBQUosQ0FBVyxjQUFhRCxHQUFHLENBQUNFLE9BQVEsRUFBcEM7QUFDRDtBQUNGLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB4Y29kZSBmcm9tICdhcHBpdW0teGNvZGUnO1xuaW1wb3J0IHsgZnMsIGxvZ2dlciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF9nbG9iIGZyb20gJ2dsb2InO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5cbmNvbnN0IGdsb2IgPSBCLnByb21pc2lmeShfZ2xvYik7XG5jb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdBdXRob3JpemVJT1MnKTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gYXV0aG9yaXplIChpbnNlY3VyZSkge1xuICBsZXQgeGNvZGVEaXI7XG4gIGxldCB1c2VyO1xuXG4gIHRyeSB7XG4gICAgLy8gZW5hYmxlIGRldmVsb3BlciB0b29sc1xuICAgIGxvZy5pbmZvKCdFbmFibGluZyBEZXZUb29sc1NlY3VyaXR5Jyk7XG4gICAgYXdhaXQgZXhlYygnRGV2VG9vbHNTZWN1cml0eScsIFsnLS1lbmFibGUnXSk7XG4gICAgLy8gdXBkYXRlIHNlY3VyaXR5IGRiIC0tIHJlbW92ZXMgYXV0aG9yaXphdGlvbiBwcm9tcHRcbiAgICBsb2cuaW5mbyhgVXBkYXRpbmcgc2VjdXJpdHkgZGIgZm9yICR7aW5zZWN1cmUgPyAnaW5zZWN1cmUnIDogJ2RldmVsb3Blcid9IGFjY2Vzc2ApO1xuICAgIGNvbnN0IGNtZCA9ICdzZWN1cml0eSc7XG4gICAgY29uc3QgYXJncyA9IFtcbiAgICAgICdhdXRob3JpemF0aW9uZGInLCAnd3JpdGUnLCAnc3lzdGVtLnByaXZpbGVnZS50YXNrcG9ydCcsXG4gICAgICAoaW5zZWN1cmUgPyAnYWxsb3cnIDogJ2lzLWRldmVsb3BlcicpLFxuICAgIF07XG4gICAgYXdhaXQgZXhlYyhjbWQsIGFyZ3MpO1xuXG4gICAgbG9nLmluZm8oJ0dyYW50aW5nIGFjY2VzcyB0byBidWlsdC1pbiBzaW11bGF0b3IgYXBwcycpO1xuICAgIGlmICghcHJvY2Vzcy5lbnYuSE9NRSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZGV0ZXJtaW5lIHlvdXIgJEhPTUUnKTtcbiAgICB9XG5cbiAgICB1c2VyID0gL1xcLyhbXi9dKykkLy5leGVjKHByb2Nlc3MuZW52LkhPTUUpWzFdO1xuICAgIHhjb2RlRGlyID0gYXdhaXQgeGNvZGUuZ2V0UGF0aCgpO1xuICAgIGxvZy5pbmZvKGBUaGUgeGNvZGUgZGlyZWN0b3J5IGlzOiAke3hjb2RlRGlyfWApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coZSk7XG4gIH1cblxuICAvLyBjaGFuZ2UgcGVybWlzc2lvblxuICBsZXQgb2xkZXJYY29kZVNpbXVsYXRvclBhdGggPSBwYXRoLnJlc29sdmUoeGNvZGVEaXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGxhdGZvcm1zL2lQaG9uZVNpbXVsYXRvci5wbGF0Zm9ybS8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdEZXZlbG9wZXIvU0RLcy9pUGhvbmVTaW11bGF0b3IqLnNkay9BcHBsaWNhdGlvbnMnKTtcbiAgbGV0IGRpcmVjdG9yaWVzID0gYXdhaXQgZ2xvYihvbGRlclhjb2RlU2ltdWxhdG9yUGF0aCk7XG5cbiAgbGV0IG5ld2VyWGNvZGVTaW11bGF0b3JQYXRoID0gcGF0aC5yZXNvbHZlKCcvTGlicmFyeS9EZXZlbG9wZXIvQ29yZVNpbXVsYXRvci8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQcm9maWxlcy9SdW50aW1lcy9pT1MgKi5zaW1ydW50aW1lLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnRzL1Jlc291cmNlcy9SdW50aW1lUm9vdC9BcHBsaWNhdGlvbnMvJyk7XG4gIGRpcmVjdG9yaWVzID0gZGlyZWN0b3JpZXMuY29uY2F0KGF3YWl0IGdsb2IobmV3ZXJYY29kZVNpbXVsYXRvclBhdGgpKTtcblxuICBkaXJlY3RvcmllcyA9IGRpcmVjdG9yaWVzLmZpbHRlcihhc3luYyAoZGlyKSA9PiB7XG4gICAgcmV0dXJuIGF3YWl0IGZzLmV4aXN0cyhkaXIpO1xuICB9KTtcblxuICBsZXQgYXJncyA9IFsnLVInLCBgJHt1c2VyfTpgLCAuLi5kaXJlY3Rvcmllc107XG5cbiAgbG9nLmluZm8oYENoYW5naW5nIG93bmVyc2hpcCB0byAnJHt1c2VyfScgb24gZGlyZWN0b3JpZXM6ICR7ZGlyZWN0b3JpZXMuam9pbignLCAnKX1gKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKCdjaG93bicsIGFyZ3MpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3IoYEVuY291bnRlcmVkIGFuIGlzc3VlIGNoYW5naW5nIHVzZXIgcHJpdmVsZWRnZXMgYCArXG4gICAgICAgICAgICAgICAgIGBmb3IgaU9TIHNpbSBhcHAgZGlyczogJHtkaXJlY3Rvcmllc31gKTtcbiAgICBsb2cuZXJyb3IoYEVycm9yIHdhczogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufVxuIl0sImZpbGUiOiJsaWIvYXV0aG9yaXplLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
