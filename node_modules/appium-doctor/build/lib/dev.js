"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidSdkExists = exports.BinaryIsInPathCheck = void 0;

require("source-map-support/register");

var _doctor = require("./doctor");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

let checks = [];

class BinaryIsInPathCheck extends _doctor.DoctorCheck {
  constructor(binary) {
    super();
    this.binary = binary;
  }

  async diagnose() {
    const resolvedPath = await (0, _utils.resolveExecutablePath)(this.binary);

    if (!resolvedPath) {
      return (0, _utils.nok)(`${this.binary} is MISSING in PATH: ${process.env.PATH}`);
    }

    return (0, _utils.ok)(`${this.binary} was found at ${resolvedPath}`);
  }

  fix() {
    return `Manually install the ${this.binary} binary and add it to PATH.`;
  }

}

exports.BinaryIsInPathCheck = BinaryIsInPathCheck;
checks.push(new BinaryIsInPathCheck(_appiumSupport.system.isWindows() ? 'mvn.bat' : 'mvn'));
checks.push(new BinaryIsInPathCheck(_appiumSupport.system.isWindows() ? 'ant.bat' : 'ant'));
checks.push(new BinaryIsInPathCheck(_appiumSupport.system.isWindows() ? 'adb.exe' : 'adb'));

class AndroidSdkExists extends _doctor.DoctorCheck {
  constructor(sdk) {
    super();
    this.sdk = sdk;
  }

  async diagnose() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return (0, _utils.nok)(`${this.sdk} could not be found because ANDROID_HOME is NOT set!`);
    }

    let sdkPath = _path.default.resolve(process.env.ANDROID_HOME, _path.default.join('platforms', this.sdk));

    return (await _appiumSupport.fs.exists(sdkPath)) ? (0, _utils.ok)(`${this.sdk} was found at: ${sdkPath}`) : (0, _utils.nok)(`${this.sdk} could NOT be found at '${sdkPath}'!`);
  }

  fix() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return 'Manually configure ANDROID_HOME.';
    }

    return `Manually install the ${this.sdk} sdk.`;
  }

}

exports.AndroidSdkExists = AndroidSdkExists;
checks.push(new AndroidSdkExists('android-16'));
checks.push(new AndroidSdkExists('android-19'));
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXYuanMiXSwibmFtZXMiOlsiY2hlY2tzIiwiQmluYXJ5SXNJblBhdGhDaGVjayIsIkRvY3RvckNoZWNrIiwiY29uc3RydWN0b3IiLCJiaW5hcnkiLCJkaWFnbm9zZSIsInJlc29sdmVkUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJQQVRIIiwiZml4IiwicHVzaCIsInN5c3RlbSIsImlzV2luZG93cyIsIkFuZHJvaWRTZGtFeGlzdHMiLCJzZGsiLCJBTkRST0lEX0hPTUUiLCJzZGtQYXRoIiwicGF0aCIsInJlc29sdmUiLCJqb2luIiwiZnMiLCJleGlzdHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBSUEsTUFBTSxHQUFHLEVBQWI7O0FBR0EsTUFBTUMsbUJBQU4sU0FBa0NDLG1CQUFsQyxDQUE4QztBQUM1Q0MsRUFBQUEsV0FBVyxDQUFFQyxNQUFGLEVBQVU7QUFDbkI7QUFDQSxTQUFLQSxNQUFMLEdBQWNBLE1BQWQ7QUFDRDs7QUFFRCxRQUFNQyxRQUFOLEdBQWtCO0FBQ2hCLFVBQU1DLFlBQVksR0FBRyxNQUFNLGtDQUFzQixLQUFLRixNQUEzQixDQUEzQjs7QUFDQSxRQUFJLENBQUNFLFlBQUwsRUFBbUI7QUFDakIsYUFBTyxnQkFBSyxHQUFFLEtBQUtGLE1BQU8sd0JBQXVCRyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBSyxFQUEzRCxDQUFQO0FBQ0Q7O0FBRUQsV0FBTyxlQUFJLEdBQUUsS0FBS0wsTUFBTyxpQkFBZ0JFLFlBQWEsRUFBL0MsQ0FBUDtBQUNEOztBQUVESSxFQUFBQSxHQUFHLEdBQUk7QUFDTCxXQUFRLHdCQUF1QixLQUFLTixNQUFPLDZCQUEzQztBQUNEOztBQWpCMkM7OztBQW9COUNKLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLElBQUlWLG1CQUFKLENBQXdCVyxzQkFBT0MsU0FBUCxLQUFxQixTQUFyQixHQUFpQyxLQUF6RCxDQUFaO0FBQ0FiLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLElBQUlWLG1CQUFKLENBQXdCVyxzQkFBT0MsU0FBUCxLQUFxQixTQUFyQixHQUFpQyxLQUF6RCxDQUFaO0FBQ0FiLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLElBQUlWLG1CQUFKLENBQXdCVyxzQkFBT0MsU0FBUCxLQUFxQixTQUFyQixHQUFpQyxLQUF6RCxDQUFaOztBQUdBLE1BQU1DLGdCQUFOLFNBQStCWixtQkFBL0IsQ0FBMkM7QUFDekNDLEVBQUFBLFdBQVcsQ0FBRVksR0FBRixFQUFPO0FBQ2hCO0FBQ0EsU0FBS0EsR0FBTCxHQUFXQSxHQUFYO0FBQ0Q7O0FBRUQsUUFBTVYsUUFBTixHQUFrQjtBQUNoQixRQUFJLE9BQU9FLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUSxZQUFuQixLQUFvQyxXQUF4QyxFQUFxRDtBQUNuRCxhQUFPLGdCQUFLLEdBQUUsS0FBS0QsR0FBSSxzREFBaEIsQ0FBUDtBQUNEOztBQUNELFFBQUlFLE9BQU8sR0FBR0MsY0FBS0MsT0FBTCxDQUFhWixPQUFPLENBQUNDLEdBQVIsQ0FBWVEsWUFBekIsRUFBdUNFLGNBQUtFLElBQUwsQ0FBVSxXQUFWLEVBQXVCLEtBQUtMLEdBQTVCLENBQXZDLENBQWQ7O0FBQ0EsV0FBTyxPQUFNTSxrQkFBR0MsTUFBSCxDQUFVTCxPQUFWLENBQU4sSUFBMkIsZUFBSSxHQUFFLEtBQUtGLEdBQUksa0JBQWlCRSxPQUFRLEVBQXhDLENBQTNCLEdBQ0wsZ0JBQUssR0FBRSxLQUFLRixHQUFJLDJCQUEwQkUsT0FBUSxJQUFsRCxDQURGO0FBRUQ7O0FBRURQLEVBQUFBLEdBQUcsR0FBSTtBQUNMLFFBQUksT0FBT0gsT0FBTyxDQUFDQyxHQUFSLENBQVlRLFlBQW5CLEtBQW9DLFdBQXhDLEVBQXFEO0FBQ25ELGFBQU8sa0NBQVA7QUFDRDs7QUFDRCxXQUFRLHdCQUF1QixLQUFLRCxHQUFJLE9BQXhDO0FBQ0Q7O0FBcEJ3Qzs7O0FBdUIzQ2YsTUFBTSxDQUFDVyxJQUFQLENBQVksSUFBSUcsZ0JBQUosQ0FBcUIsWUFBckIsQ0FBWjtBQUNBZCxNQUFNLENBQUNXLElBQVAsQ0FBWSxJQUFJRyxnQkFBSixDQUFxQixZQUFyQixDQUFaO2VBR2VkLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb2N0b3JDaGVjayB9IGZyb20gJy4vZG9jdG9yJztcbmltcG9ydCB7IG9rLCBub2ssIHJlc29sdmVFeGVjdXRhYmxlUGF0aCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZnMsIHN5c3RlbSB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5sZXQgY2hlY2tzID0gW107XG5cbi8vIENoZWNrIFBBVEggYmluYXJpZXNcbmNsYXNzIEJpbmFyeUlzSW5QYXRoQ2hlY2sgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGNvbnN0cnVjdG9yIChiaW5hcnkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYmluYXJ5ID0gYmluYXJ5O1xuICB9XG5cbiAgYXN5bmMgZGlhZ25vc2UgKCkge1xuICAgIGNvbnN0IHJlc29sdmVkUGF0aCA9IGF3YWl0IHJlc29sdmVFeGVjdXRhYmxlUGF0aCh0aGlzLmJpbmFyeSk7XG4gICAgaWYgKCFyZXNvbHZlZFBhdGgpIHtcbiAgICAgIHJldHVybiBub2soYCR7dGhpcy5iaW5hcnl9IGlzIE1JU1NJTkcgaW4gUEFUSDogJHtwcm9jZXNzLmVudi5QQVRIfWApO1xuICAgIH1cblxuICAgIHJldHVybiBvayhgJHt0aGlzLmJpbmFyeX0gd2FzIGZvdW5kIGF0ICR7cmVzb2x2ZWRQYXRofWApO1xuICB9XG5cbiAgZml4ICgpIHtcbiAgICByZXR1cm4gYE1hbnVhbGx5IGluc3RhbGwgdGhlICR7dGhpcy5iaW5hcnl9IGJpbmFyeSBhbmQgYWRkIGl0IHRvIFBBVEguYDtcbiAgfVxufVxuXG5jaGVja3MucHVzaChuZXcgQmluYXJ5SXNJblBhdGhDaGVjayhzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnbXZuLmJhdCcgOiAnbXZuJykpO1xuY2hlY2tzLnB1c2gobmV3IEJpbmFyeUlzSW5QYXRoQ2hlY2soc3lzdGVtLmlzV2luZG93cygpID8gJ2FudC5iYXQnIDogJ2FudCcpKTtcbmNoZWNrcy5wdXNoKG5ldyBCaW5hcnlJc0luUGF0aENoZWNrKHN5c3RlbS5pc1dpbmRvd3MoKSA/ICdhZGIuZXhlJyA6ICdhZGInKSk7XG5cbi8vIENoZWNrIEFuZHJvaWQgU0RLc1xuY2xhc3MgQW5kcm9pZFNka0V4aXN0cyBleHRlbmRzIERvY3RvckNoZWNrIHtcbiAgY29uc3RydWN0b3IgKHNkaykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zZGsgPSBzZGs7XG4gIH1cblxuICBhc3luYyBkaWFnbm9zZSAoKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzLmVudi5BTkRST0lEX0hPTUUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbm9rKGAke3RoaXMuc2RrfSBjb3VsZCBub3QgYmUgZm91bmQgYmVjYXVzZSBBTkRST0lEX0hPTUUgaXMgTk9UIHNldCFgKTtcbiAgICB9XG4gICAgbGV0IHNka1BhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FLCBwYXRoLmpvaW4oJ3BsYXRmb3JtcycsIHRoaXMuc2RrKSk7XG4gICAgcmV0dXJuIGF3YWl0IGZzLmV4aXN0cyhzZGtQYXRoKSA/IG9rKGAke3RoaXMuc2RrfSB3YXMgZm91bmQgYXQ6ICR7c2RrUGF0aH1gKSA6XG4gICAgICBub2soYCR7dGhpcy5zZGt9IGNvdWxkIE5PVCBiZSBmb3VuZCBhdCAnJHtzZGtQYXRofSchYCk7XG4gIH1cblxuICBmaXggKCkge1xuICAgIGlmICh0eXBlb2YgcHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuICdNYW51YWxseSBjb25maWd1cmUgQU5EUk9JRF9IT01FLic7XG4gICAgfVxuICAgIHJldHVybiBgTWFudWFsbHkgaW5zdGFsbCB0aGUgJHt0aGlzLnNka30gc2RrLmA7XG4gIH1cbn1cblxuY2hlY2tzLnB1c2gobmV3IEFuZHJvaWRTZGtFeGlzdHMoJ2FuZHJvaWQtMTYnKSk7XG5jaGVja3MucHVzaChuZXcgQW5kcm9pZFNka0V4aXN0cygnYW5kcm9pZC0xOScpKTtcblxuZXhwb3J0IHsgQmluYXJ5SXNJblBhdGhDaGVjaywgQW5kcm9pZFNka0V4aXN0cyB9O1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tzO1xuIl0sImZpbGUiOiJsaWIvZGV2LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
