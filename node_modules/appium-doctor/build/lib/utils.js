"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureBinaryLog = configureBinaryLog;
exports.resolveExecutablePath = resolveExecutablePath;
exports.authorizeIos = exports.inquirer = exports.nokOptional = exports.okOptional = exports.nok = exports.ok = exports.pkgRoot = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _inquirer2 = _interopRequireDefault(require("inquirer"));

var _logger = _interopRequireDefault(require("../lib/logger"));

var _authorizeIos = _interopRequireDefault(require("authorize-ios"));

var _appiumSupport = require("appium-support");

const authorizeIos = _authorizeIos.default;
exports.authorizeIos = authorizeIos;
const pkgRoot = process.env.NO_PRECOMPILE ? _path.default.resolve(__dirname, '..') : _path.default.resolve(__dirname, '..', '..');
exports.pkgRoot = pkgRoot;

const ok = message => {
  return {
    ok: true,
    optional: false,
    message
  };
};

exports.ok = ok;

const nok = message => {
  return {
    ok: false,
    optional: false,
    message
  };
};

exports.nok = nok;

const okOptional = message => {
  return {
    ok: true,
    optional: true,
    message
  };
};

exports.okOptional = okOptional;

const nokOptional = message => {
  return {
    ok: false,
    optional: true,
    message
  };
};

exports.nokOptional = nokOptional;
const inquirer = {
  prompt: _bluebird.default.promisify(function (question, cb) {
    _inquirer2.default.prompt(question, function (resp) {
      cb(null, resp);
    });
  })
};
exports.inquirer = inquirer;

function configureBinaryLog(opts) {
  let actualLog = _logger.default.unwrap().log;

  _logger.default.unwrap().log = function (level, prefix, msg) {
    let l = this.levels[level];
    if (l < this.levels[this.level]) return;
    actualLog(level, prefix, msg);
  };

  _logger.default.level = opts.debug ? 'debug' : 'info';
}

async function resolveExecutablePath(cmd) {
  let executablePath;

  try {
    executablePath = await _appiumSupport.fs.which(cmd);

    if (executablePath && (await _appiumSupport.fs.exists(executablePath))) {
      return executablePath;
    }
  } catch (err) {
    if (/not found/gi.test(err.message)) {
      _logger.default.debug(err);
    } else {
      _logger.default.warn(err);
    }
  }

  _logger.default.debug(`No executable path of '${cmd}'.`);

  if (executablePath) {
    _logger.default.debug(`Does '${executablePath}' exist?`);
  }

  return null;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJhdXRob3JpemVJb3MiLCJhdXRob3JpemUiLCJwa2dSb290IiwicHJvY2VzcyIsImVudiIsIk5PX1BSRUNPTVBJTEUiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIm9rIiwibWVzc2FnZSIsIm9wdGlvbmFsIiwibm9rIiwib2tPcHRpb25hbCIsIm5va09wdGlvbmFsIiwiaW5xdWlyZXIiLCJwcm9tcHQiLCJCIiwicHJvbWlzaWZ5IiwicXVlc3Rpb24iLCJjYiIsIl9pbnF1aXJlciIsInJlc3AiLCJjb25maWd1cmVCaW5hcnlMb2ciLCJvcHRzIiwiYWN0dWFsTG9nIiwibG9nIiwidW53cmFwIiwibGV2ZWwiLCJwcmVmaXgiLCJtc2ciLCJsIiwibGV2ZWxzIiwiZGVidWciLCJyZXNvbHZlRXhlY3V0YWJsZVBhdGgiLCJjbWQiLCJleGVjdXRhYmxlUGF0aCIsImZzIiwid2hpY2giLCJleGlzdHMiLCJlcnIiLCJ0ZXN0Iiwid2FybiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFlBQVksR0FBR0MscUJBQXJCOztBQUVBLE1BQU1DLE9BQU8sR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGFBQVosR0FDZEMsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLENBRGMsR0FDa0JGLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixJQUF4QixFQUE4QixJQUE5QixDQURsQzs7O0FBR0EsTUFBTUMsRUFBRSxHQUFJQyxPQUFELElBQWE7QUFBRSxTQUFPO0FBQUNELElBQUFBLEVBQUUsRUFBRSxJQUFMO0FBQVdFLElBQUFBLFFBQVEsRUFBRSxLQUFyQjtBQUE0QkQsSUFBQUE7QUFBNUIsR0FBUDtBQUE4QyxDQUF4RTs7OztBQUNBLE1BQU1FLEdBQUcsR0FBSUYsT0FBRCxJQUFhO0FBQUUsU0FBTztBQUFDRCxJQUFBQSxFQUFFLEVBQUUsS0FBTDtBQUFZRSxJQUFBQSxRQUFRLEVBQUUsS0FBdEI7QUFBNkJELElBQUFBO0FBQTdCLEdBQVA7QUFBK0MsQ0FBMUU7Ozs7QUFDQSxNQUFNRyxVQUFVLEdBQUlILE9BQUQsSUFBYTtBQUFFLFNBQU87QUFBQ0QsSUFBQUEsRUFBRSxFQUFFLElBQUw7QUFBV0UsSUFBQUEsUUFBUSxFQUFFLElBQXJCO0FBQTJCRCxJQUFBQTtBQUEzQixHQUFQO0FBQTZDLENBQS9FOzs7O0FBQ0EsTUFBTUksV0FBVyxHQUFJSixPQUFELElBQWE7QUFBRSxTQUFPO0FBQUNELElBQUFBLEVBQUUsRUFBRSxLQUFMO0FBQVlFLElBQUFBLFFBQVEsRUFBRSxJQUF0QjtBQUE0QkQsSUFBQUE7QUFBNUIsR0FBUDtBQUE4QyxDQUFqRjs7O0FBRUEsTUFBTUssUUFBUSxHQUFHO0FBQ2ZDLEVBQUFBLE1BQU0sRUFBRUMsa0JBQUVDLFNBQUYsQ0FBWSxVQUFVQyxRQUFWLEVBQW9CQyxFQUFwQixFQUF3QjtBQUMxQ0MsdUJBQVVMLE1BQVYsQ0FBaUJHLFFBQWpCLEVBQTJCLFVBQVVHLElBQVYsRUFBZ0I7QUFBRUYsTUFBQUEsRUFBRSxDQUFDLElBQUQsRUFBT0UsSUFBUCxDQUFGO0FBQWlCLEtBQTlEO0FBQ0QsR0FGTztBQURPLENBQWpCOzs7QUFNQSxTQUFTQyxrQkFBVCxDQUE2QkMsSUFBN0IsRUFBbUM7QUFDakMsTUFBSUMsU0FBUyxHQUFHQyxnQkFBSUMsTUFBSixHQUFhRCxHQUE3Qjs7QUFDQUEsa0JBQUlDLE1BQUosR0FBYUQsR0FBYixHQUFtQixVQUFVRSxLQUFWLEVBQWlCQyxNQUFqQixFQUF5QkMsR0FBekIsRUFBOEI7QUFDL0MsUUFBSUMsQ0FBQyxHQUFHLEtBQUtDLE1BQUwsQ0FBWUosS0FBWixDQUFSO0FBQ0EsUUFBSUcsQ0FBQyxHQUFHLEtBQUtDLE1BQUwsQ0FBWSxLQUFLSixLQUFqQixDQUFSLEVBQWlDO0FBQ2pDSCxJQUFBQSxTQUFTLENBQUNHLEtBQUQsRUFBUUMsTUFBUixFQUFnQkMsR0FBaEIsQ0FBVDtBQUNELEdBSkQ7O0FBS0FKLGtCQUFJRSxLQUFKLEdBQVlKLElBQUksQ0FBQ1MsS0FBTCxHQUFhLE9BQWIsR0FBdUIsTUFBbkM7QUFDRDs7QUFRRCxlQUFlQyxxQkFBZixDQUFzQ0MsR0FBdEMsRUFBMkM7QUFDekMsTUFBSUMsY0FBSjs7QUFDQSxNQUFJO0FBQ0ZBLElBQUFBLGNBQWMsR0FBRyxNQUFNQyxrQkFBR0MsS0FBSCxDQUFTSCxHQUFULENBQXZCOztBQUNBLFFBQUlDLGNBQWMsS0FBSSxNQUFNQyxrQkFBR0UsTUFBSCxDQUFVSCxjQUFWLENBQVYsQ0FBbEIsRUFBdUQ7QUFDckQsYUFBT0EsY0FBUDtBQUNEO0FBQ0YsR0FMRCxDQUtFLE9BQU9JLEdBQVAsRUFBWTtBQUNaLFFBQUssYUFBRCxDQUFnQkMsSUFBaEIsQ0FBcUJELEdBQUcsQ0FBQzlCLE9BQXpCLENBQUosRUFBdUM7QUFDckNnQixzQkFBSU8sS0FBSixDQUFVTyxHQUFWO0FBQ0QsS0FGRCxNQUVPO0FBQ0xkLHNCQUFJZ0IsSUFBSixDQUFTRixHQUFUO0FBQ0Q7QUFDRjs7QUFDRGQsa0JBQUlPLEtBQUosQ0FBVywwQkFBeUJFLEdBQUksSUFBeEM7O0FBQ0EsTUFBSUMsY0FBSixFQUFvQjtBQUNsQlYsb0JBQUlPLEtBQUosQ0FBVyxTQUFRRyxjQUFlLFVBQWxDO0FBQ0Q7O0FBQ0QsU0FBTyxJQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfaW5xdWlyZXIgZnJvbSAnaW5xdWlyZXInO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9saWIvbG9nZ2VyJztcbmltcG9ydCBhdXRob3JpemUgZnJvbSAnYXV0aG9yaXplLWlvcyc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuLy8gcmVuYW1lIHRvIG1ha2UgbW9yZSBzZW5zZVxuY29uc3QgYXV0aG9yaXplSW9zID0gYXV0aG9yaXplO1xuXG5jb25zdCBwa2dSb290ID0gcHJvY2Vzcy5lbnYuTk9fUFJFQ09NUElMRSA/XG4gIHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicpIDogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJyk7XG5cbmNvbnN0IG9rID0gKG1lc3NhZ2UpID0+IHsgcmV0dXJuIHtvazogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlLCBtZXNzYWdlfTsgfTtcbmNvbnN0IG5vayA9IChtZXNzYWdlKSA9PiB7IHJldHVybiB7b2s6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIG1lc3NhZ2V9OyB9O1xuY29uc3Qgb2tPcHRpb25hbCA9IChtZXNzYWdlKSA9PiB7IHJldHVybiB7b2s6IHRydWUsIG9wdGlvbmFsOiB0cnVlLCBtZXNzYWdlfTsgfTtcbmNvbnN0IG5va09wdGlvbmFsID0gKG1lc3NhZ2UpID0+IHsgcmV0dXJuIHtvazogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCBtZXNzYWdlfTsgfTtcblxuY29uc3QgaW5xdWlyZXIgPSB7XG4gIHByb21wdDogQi5wcm9taXNpZnkoZnVuY3Rpb24gKHF1ZXN0aW9uLCBjYikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrc1xuICAgIF9pbnF1aXJlci5wcm9tcHQocXVlc3Rpb24sIGZ1bmN0aW9uIChyZXNwKSB7IGNiKG51bGwsIHJlc3ApOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3NcbiAgfSlcbn07XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZUJpbmFyeUxvZyAob3B0cykge1xuICBsZXQgYWN0dWFsTG9nID0gbG9nLnVud3JhcCgpLmxvZztcbiAgbG9nLnVud3JhcCgpLmxvZyA9IGZ1bmN0aW9uIChsZXZlbCwgcHJlZml4LCBtc2cpIHtcbiAgICBsZXQgbCA9IHRoaXMubGV2ZWxzW2xldmVsXTtcbiAgICBpZiAobCA8IHRoaXMubGV2ZWxzW3RoaXMubGV2ZWxdKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcbiAgICBhY3R1YWxMb2cobGV2ZWwsIHByZWZpeCwgbXNnKTtcbiAgfTtcbiAgbG9nLmxldmVsID0gb3B0cy5kZWJ1ZyA/ICdkZWJ1ZycgOiAnaW5mbyc7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGV4ZWN1dGFibGUgcGF0aCBvZiBjbWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY21kIFN0YW5kYXJkIG91dHB1dCBieSBjb21tYW5kXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZnVsbCBwYXRoIG9mIGNtZC4gYG51bGxgIGlmIHRoZSBjbWQgaXMgbm90IGZvdW5kLlxuICovXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRXhlY3V0YWJsZVBhdGggKGNtZCkge1xuICBsZXQgZXhlY3V0YWJsZVBhdGg7XG4gIHRyeSB7XG4gICAgZXhlY3V0YWJsZVBhdGggPSBhd2FpdCBmcy53aGljaChjbWQpO1xuICAgIGlmIChleGVjdXRhYmxlUGF0aCAmJiBhd2FpdCBmcy5leGlzdHMoZXhlY3V0YWJsZVBhdGgpKSB7XG4gICAgICByZXR1cm4gZXhlY3V0YWJsZVBhdGg7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoKC9ub3QgZm91bmQvZ2kpLnRlc3QoZXJyLm1lc3NhZ2UpKSB7XG4gICAgICBsb2cuZGVidWcoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLndhcm4oZXJyKTtcbiAgICB9XG4gIH1cbiAgbG9nLmRlYnVnKGBObyBleGVjdXRhYmxlIHBhdGggb2YgJyR7Y21kfScuYCk7XG4gIGlmIChleGVjdXRhYmxlUGF0aCkge1xuICAgIGxvZy5kZWJ1ZyhgRG9lcyAnJHtleGVjdXRhYmxlUGF0aH0nIGV4aXN0P2ApO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBwa2dSb290LCBvaywgbm9rLCBva09wdGlvbmFsLCBub2tPcHRpb25hbCwgaW5xdWlyZXIsIGNvbmZpZ3VyZUJpbmFyeUxvZywgYXV0aG9yaXplSW9zLCByZXNvbHZlRXhlY3V0YWJsZVBhdGh9O1xuIl0sImZpbGUiOiJsaWIvdXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
