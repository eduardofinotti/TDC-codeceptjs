"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OptionalFfmpegCommandCheck = exports.OptionalOpencv4nodejsCommandCheck = exports.OptionalPythonVersionCheck = exports.NodeVersionCheck = exports.NodeBinaryCheck = void 0;

require("source-map-support/register");

var _utils = require("./utils");

var _teen_process = require("teen_process");

var _doctor = require("./doctor");

var _nodeDetector = _interopRequireDefault(require("./node-detector"));

var _logger = _interopRequireDefault(require("./logger"));

var _os = require("os");

var _appiumSupport = require("appium-support");

let checks = [];

class NodeBinaryCheck extends _doctor.DoctorCheck {
  async diagnose() {
    let nodePath = await _nodeDetector.default.detect();
    return nodePath ? (0, _utils.ok)(`The Node.js binary was found at: ${nodePath}`) : (0, _utils.nok)('The Node.js binary was NOT found!');
  }

  fix() {
    return `Manually setup Node.js.`;
  }

}

exports.NodeBinaryCheck = NodeBinaryCheck;
checks.push(new NodeBinaryCheck());

class NodeVersionCheck extends _doctor.DoctorCheck {
  async diagnose() {
    let nodePath = await _nodeDetector.default.detect();

    if (!nodePath) {
      return (0, _utils.nok)('Node is not installed, so no version to check!');
    }

    let {
      stdout
    } = await (0, _teen_process.exec)(nodePath, ['--version']);
    let versionString = stdout.replace('v', '').trim();
    let version = parseInt(versionString, 10);

    if (Number.isNaN(version)) {
      return (0, _utils.nok)(`Unable to find node version (version = '${versionString}')`);
    }

    return version >= 4 ? (0, _utils.ok)(`Node version is ${versionString}`) : (0, _utils.nok)('Node version should be at least 4!');
  }

  fix() {
    return `Manually upgrade Node.js.`;
  }

}

exports.NodeVersionCheck = NodeVersionCheck;
checks.push(new NodeVersionCheck());

class OptionalPythonVersionCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const pythonPath = await (0, _utils.resolveExecutablePath)(`python${_appiumSupport.system.isWindows() ? `.EXE` : ''}`);

    if (!pythonPath) {
      return (0, _utils.nokOptional)(`Python required by node-gyp (used by heapdump) not found in PATH: ${process.env.PATH}`);
    }

    const {
      stdout,
      stderr
    } = await (0, _teen_process.exec)(pythonPath, ['-V']);
    let versionString = `${stdout} ${stderr}`.match(/Python (\d(\.\d+)*)/g);

    if (versionString) {
      versionString = versionString.pop().replace('Python ', '');
    }

    const version = parseInt(versionString, 10);

    if (Number.isNaN(version)) {
      return (0, _utils.nokOptional)(`Unable to identify Python version correctly (version = '${versionString}') at ${pythonPath}. Please make sure your Python environment in PATH: ${process.env.PATH}. node-gyp (used by heapdump) requires Python 2.x`);
    }

    return version === 2 ? (0, _utils.okOptional)(`Python required by node-gyp (used by heapdump) is installed at: ${pythonPath}. Installed version is: ${versionString}`) : (0, _utils.nokOptional)('Python version required by node-gyp (used by heapdump) should be 2.x');
  }

  fix() {
    return `Manually configure Python 2.x environment. node-gyp which is NodeJS toolchain requires Python 2.x`;
  }

}

exports.OptionalPythonVersionCheck = OptionalPythonVersionCheck;
checks.push(new OptionalPythonVersionCheck());

class OptionalOpencv4nodejsCommandCheck extends _doctor.DoctorCheck {
  async diagnose() {
    let stdout = '';
    const packageName = 'opencv4nodejs';
    const npmPath = await (0, _utils.resolveExecutablePath)(`npm${_appiumSupport.system.isWindows() ? `.cmd` : ''}`);

    if (!npmPath) {
      return (0, _utils.nokOptional)(`'npm' binary not found in PATH: ${process.env.PATH}`);
    }

    try {
      ({
        stdout
      } = await (0, _teen_process.exec)(npmPath, ['list', '-g', packageName]));
    } catch (err) {
      _logger.default.debug(err);
    }

    if (stdout.includes(packageName)) {
      const lines = stdout.split(_os.EOL);
      const openvcLib = lines.find(function (line) {
        return line.includes(`${packageName}@`);
      });
      return openvcLib ? (0, _utils.okOptional)(`${packageName} is installed at: ${lines[0]}. Installed version is: ${openvcLib.match(/(\d(\.\d+)*)/g).pop()}`) : (0, _utils.okOptional)(`${packageName} is probably installed at: ${lines[0]}.`);
    }

    return (0, _utils.nokOptional)(`${packageName} cannot be found.`);
  }

  async fix() {
    return 'Why opencv4nodejs is needed and how to install it: https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/image-comparison.md';
  }

}

exports.OptionalOpencv4nodejsCommandCheck = OptionalOpencv4nodejsCommandCheck;
checks.push(new OptionalOpencv4nodejsCommandCheck());

class OptionalFfmpegCommandCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const ffmpegPath = await (0, _utils.resolveExecutablePath)('ffmpeg');
    return ffmpegPath ? (0, _utils.okOptional)(`ffmpeg is installed at: ${ffmpegPath}. ${(await (0, _teen_process.exec)('ffmpeg', ['-version'])).stdout.split(_os.EOL)[0]}`) : (0, _utils.nokOptional)('ffmpeg cannot be found');
  }

  async fix() {
    return 'ffmpeg is needed to record screen features. Please read https://www.ffmpeg.org/ to install it';
  }

}

exports.OptionalFfmpegCommandCheck = OptionalFfmpegCommandCheck;
checks.push(new OptionalFfmpegCommandCheck());
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
