"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FixSkippedError = exports.DoctorCheck = exports.Doctor = void 0;

require("source-map-support/register");

require("colors");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _package = require("../../package.json");

class FixSkippedError extends Error {}

exports.FixSkippedError = FixSkippedError;

class DoctorCheck {
  constructor(opts = {}) {
    this.autofix = !!opts.autofix;
  }

  diagnose() {
    throw new Error('Not Implemented!');
  }

  fix() {
    throw new Error('Not Implemented!');
  }

}

exports.DoctorCheck = DoctorCheck;

class Doctor {
  constructor() {
    this.checks = [];
    this.checkOptionals = [];
    this.toFix = [];
    this.toFixOptionals = [];
  }

  register(checks) {
    checks = Array.isArray(checks) ? checks : [checks];
    this.checks = this.checks.concat(checks);
  }

  async diagnose() {
    _logger.default.info(`### Diagnostic for ${'necessary'.green} dependencies starting ###`);

    this.toFix = [];

    for (const check of this.checks) {
      const res = await check.diagnose();

      if (res.optional) {
        this.checkOptionals.push(check);
        continue;
      }

      await this.diagnosticResultMessage(res, this.toFix, check);
    }

    _logger.default.info(`### Diagnostic for necessary dependencies completed, ${await this.fixMessage(this.toFix.length)}. ###`);

    _logger.default.info('');

    _logger.default.info(`### Diagnostic for ${'optional'.yellow} dependencies starting ###`);

    this.toFixOptionals = [];

    for (const checkOptional of this.checkOptionals) {
      await this.diagnosticResultMessage((await checkOptional.diagnose()), this.toFixOptionals, checkOptional);
    }

    _logger.default.info(`### Diagnostic for optional dependencies completed, ${await this.fixMessage(this.toFixOptionals.length, true)}. ###`);

    _logger.default.info('');
  }

  async reportManualFixes(fix, fixOptioal) {
    const manualFixes = _lodash.default.filter(fix, f => {
      return !f.check.autofix;
    });

    const manualFixesOptional = _lodash.default.filter(fixOptioal, f => {
      return !f.check.autofix;
    });

    if (manualFixes.length > 0) {
      _logger.default.info('### Manual Fixes Needed ###');

      _logger.default.info('The configuration cannot be automatically fixed, please do the following first:');

      const fixMessages = [];

      for (const f of manualFixes) {
        fixMessages.push((await f.check.fix()));
      }

      for (const m of _lodash.default.uniq(fixMessages)) {
        _logger.default.warn(` \u279C ${m}`);
      }

      _logger.default.info('');
    }

    if (manualFixesOptional.length > 0) {
      _logger.default.info('### Optional Manual Fixes ###');

      _logger.default.info('The configuration can install optionally. Please do the following manually:');

      const fixMessages = [];

      for (const f of manualFixesOptional) {
        fixMessages.push((await f.check.fix()));
      }

      for (const m of _lodash.default.uniq(fixMessages)) {
        _logger.default.warn(` \u279C ${m}`);
      }

      _logger.default.info('');
    }

    if (manualFixes.length > 0 || manualFixesOptional.length > 0) {
      _logger.default.info('###');

      _logger.default.info('');

      _logger.default.info('Bye! Run appium-doctor again when all manual fixes have been applied!');

      _logger.default.info('');

      return true;
    }

    return false;
  }

  async runAutoFix(f) {
    _logger.default.info(`### Fixing: ${f.error} ###`);

    try {
      await f.check.fix();
    } catch (err) {
      if (err instanceof FixSkippedError) {
        _logger.default.info(`### Skipped fix ###`);

        return;
      } else {
        _logger.default.warn(`${err}`.replace(/\n$/g, ''));

        _logger.default.info(`### Fix did not succeed ###`);

        return;
      }
    }

    _logger.default.info('Checking if this was fixed:');

    let res = await f.check.diagnose();

    if (res.ok) {
      f.fixed = true;

      _logger.default.info(` ${'\u2714'.green} ${res.message}`);

      _logger.default.info(`### Fix was successfully applied ###`);
    } else {
      _logger.default.info(` ${'\u2716'.red} ${res.message}`);

      _logger.default.info(`### Fix was applied but issue remains ###`);
    }
  }

  async runAutoFixes() {
    let autoFixes = _lodash.default.filter(this.toFix, f => {
      return f.check.autofix;
    });

    for (let f of autoFixes) {
      await this.runAutoFix(f);

      _logger.default.info('');
    }

    if (_lodash.default.find(autoFixes, f => {
      return !f.fixed;
    })) {
      _logger.default.info('Bye! A few issues remain, fix manually and/or rerun appium-doctor!');
    } else {
      _logger.default.info('Bye! All issues have been fixed!');
    }

    _logger.default.info('');
  }

  async run() {
    _logger.default.info(`Appium Doctor v.${_package.version}`);

    await this.diagnose();

    if (await this.reportSuccess(this.toFix.length, this.toFixOptionals.length)) {
      return;
    }

    if (await this.reportManualFixes(this.toFix, this.toFixOptionals)) {
      return;
    }

    await this.runAutoFixes();
  }

  async diagnosticResultMessage(result, toFixList, check) {
    if (result.ok) {
      _logger.default.info(` ${'\u2714'.green} ${result.message}`);
    } else {
      const errorMessage = result.optional ? ` ${'\u2716'.yellow} ${result.message}` : ` ${'\u2716'.red} ${result.message}`;

      _logger.default.warn(errorMessage);

      toFixList.push({
        error: errorMessage,
        check
      });
    }
  }

  async fixMessage(length, optional = false) {
    let message;

    switch (length) {
      case 0:
        message = 'no fix';
        break;

      case 1:
        message = 'one fix';
        break;

      default:
        message = `${length} fixes`;
    }

    return `${message} ${optional ? 'possible' : 'needed'}`;
  }

  async reportSuccess(length, lengthOptional) {
    if (length === 0 && lengthOptional === 0) {
      _logger.default.info('Everything looks good, bye!');

      _logger.default.info('');

      return true;
    } else {
      return false;
    }
  }

}

exports.Doctor = Doctor;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
