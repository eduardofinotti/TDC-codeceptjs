"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EnvVarAndPathCheck", {
  enumerable: true,
  get: function () {
    return _env.default;
  }
});
exports.default = exports.OptionalAppBundleCheck = exports.JavaOnPathCheck = exports.AndroidToolCheck = void 0;

require("source-map-support/register");

var _doctor = require("./doctor");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _env = _interopRequireDefault(require("./env"));

let checks = [];
let javaHome = _appiumSupport.system.isWindows() ? '%JAVA_HOME%' : '$JAVA_HOME';
checks.push(new _env.default('ANDROID_HOME'));
checks.push(new _env.default('JAVA_HOME'));

class JavaOnPathCheck extends _doctor.DoctorCheck {
  async diagnose() {
    if (process.env.JAVA_HOME) {
      let javaHomeBin = _path.default.resolve(process.env.JAVA_HOME, 'bin');

      if (process.env.PATH.indexOf(javaHomeBin) + 1) {
        return (0, _utils.ok)(`Bin directory of ${javaHome} is set`);
      }
    }

    return (0, _utils.nok)(`Bin directory for ${javaHome} is not set`);
  }

  fix() {
    return `Add '${javaHome}${_path.default.sep}bin' to your PATH environment`;
  }

}

exports.JavaOnPathCheck = JavaOnPathCheck;

class AndroidToolCheck extends _doctor.DoctorCheck {
  constructor(toolName, toolPath) {
    super();
    this.toolName = toolName;
    this.toolPath = toolPath;
  }

  async diagnose() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return (0, _utils.nok)(`${this.toolName} could not be found because ANDROID_HOME is NOT set!`);
    }

    let fullPath = _path.default.resolve(process.env.ANDROID_HOME, this.toolPath);

    return (await _appiumSupport.fs.exists(fullPath)) ? (0, _utils.ok)(`${this.toolName} exists at: ${fullPath}`) : (0, _utils.nok)(`${this.toolName} could NOT be found at '${fullPath}'!`);
  }

  fix() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return 'Manually configure ANDROID_HOME and run appium-doctor again.';
    }

    return `Manually install ${this.toolName} and add it to PATH.`;
  }

}

exports.AndroidToolCheck = AndroidToolCheck;
checks.push(new AndroidToolCheck('adb', _path.default.join('platform-tools', _appiumSupport.system.isWindows() ? 'adb.exe' : 'adb')));
checks.push(new AndroidToolCheck('android', _path.default.join('tools', _appiumSupport.system.isWindows() ? 'android.bat' : 'android')));
checks.push(new AndroidToolCheck('emulator', _path.default.join('tools', _appiumSupport.system.isWindows() ? 'emulator.exe' : 'emulator')));
checks.push(new JavaOnPathCheck());

class OptionalAppBundleCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const bundletoolPath = await (0, _utils.resolveExecutablePath)('bundletool.jar');
    return bundletoolPath ? (0, _utils.okOptional)(`bundletool.jar is installed at: ${bundletoolPath}`) : (0, _utils.nokOptional)('bundletool.jar cannot be found');
  }

  async fix() {
    return 'bundletool.jar is used to handle Android App Bundle. Please read http://appium.io/docs/en/writing-running-appium/android/android-appbundle/ to install it';
  }

}

exports.OptionalAppBundleCheck = OptionalAppBundleCheck;
checks.push(new OptionalAppBundleCheck());
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hbmRyb2lkLmpzIl0sIm5hbWVzIjpbImNoZWNrcyIsImphdmFIb21lIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwicHVzaCIsIkVudlZhckFuZFBhdGhDaGVjayIsIkphdmFPblBhdGhDaGVjayIsIkRvY3RvckNoZWNrIiwiZGlhZ25vc2UiLCJwcm9jZXNzIiwiZW52IiwiSkFWQV9IT01FIiwiamF2YUhvbWVCaW4iLCJwYXRoIiwicmVzb2x2ZSIsIlBBVEgiLCJpbmRleE9mIiwiZml4Iiwic2VwIiwiQW5kcm9pZFRvb2xDaGVjayIsImNvbnN0cnVjdG9yIiwidG9vbE5hbWUiLCJ0b29sUGF0aCIsIkFORFJPSURfSE9NRSIsImZ1bGxQYXRoIiwiZnMiLCJleGlzdHMiLCJqb2luIiwiT3B0aW9uYWxBcHBCdW5kbGVDaGVjayIsImJ1bmRsZXRvb2xQYXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLE1BQU0sR0FBRyxFQUFiO0FBRUEsSUFBSUMsUUFBUSxHQUFHQyxzQkFBT0MsU0FBUCxLQUFxQixhQUFyQixHQUFxQyxZQUFwRDtBQUVBSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJQyxZQUFKLENBQXVCLGNBQXZCLENBQVo7QUFDQUwsTUFBTSxDQUFDSSxJQUFQLENBQVksSUFBSUMsWUFBSixDQUF1QixXQUF2QixDQUFaOztBQUdBLE1BQU1DLGVBQU4sU0FBOEJDLG1CQUE5QixDQUEwQztBQUN4QyxRQUFNQyxRQUFOLEdBQWtCO0FBQ2hCLFFBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFoQixFQUEyQjtBQUN6QixVQUFJQyxXQUFXLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUwsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQXpCLEVBQW9DLEtBQXBDLENBQWxCOztBQUNBLFVBQUlGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxJQUFaLENBQWlCQyxPQUFqQixDQUF5QkosV0FBekIsSUFBd0MsQ0FBNUMsRUFBK0M7QUFDN0MsZUFBTyxlQUFJLG9CQUFtQlgsUUFBUyxTQUFoQyxDQUFQO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPLGdCQUFLLHFCQUFvQkEsUUFBUyxhQUFsQyxDQUFQO0FBQ0Q7O0FBRURnQixFQUFBQSxHQUFHLEdBQUk7QUFDTCxXQUFRLFFBQU9oQixRQUFTLEdBQUVZLGNBQUtLLEdBQUksK0JBQW5DO0FBQ0Q7O0FBYnVDOzs7O0FBaUIxQyxNQUFNQyxnQkFBTixTQUErQlosbUJBQS9CLENBQTJDO0FBQ3pDYSxFQUFBQSxXQUFXLENBQUVDLFFBQUYsRUFBWUMsUUFBWixFQUFzQjtBQUMvQjtBQUNBLFNBQUtELFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDRDs7QUFFRCxRQUFNZCxRQUFOLEdBQWtCO0FBQ2hCLFFBQUksT0FBT0MsT0FBTyxDQUFDQyxHQUFSLENBQVlhLFlBQW5CLEtBQW9DLFdBQXhDLEVBQXFEO0FBQ25ELGFBQU8sZ0JBQUssR0FBRSxLQUFLRixRQUFTLHNEQUFyQixDQUFQO0FBQ0Q7O0FBQ0QsUUFBSUcsUUFBUSxHQUFHWCxjQUFLQyxPQUFMLENBQWFMLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYSxZQUF6QixFQUF1QyxLQUFLRCxRQUE1QyxDQUFmOztBQUNBLFdBQU8sT0FBTUcsa0JBQUdDLE1BQUgsQ0FBVUYsUUFBVixDQUFOLElBQTRCLGVBQUksR0FBRSxLQUFLSCxRQUFTLGVBQWNHLFFBQVMsRUFBM0MsQ0FBNUIsR0FDTCxnQkFBSyxHQUFFLEtBQUtILFFBQVMsMkJBQTBCRyxRQUFTLElBQXhELENBREY7QUFFRDs7QUFFRFAsRUFBQUEsR0FBRyxHQUFJO0FBQ0wsUUFBSSxPQUFPUixPQUFPLENBQUNDLEdBQVIsQ0FBWWEsWUFBbkIsS0FBb0MsV0FBeEMsRUFBcUQ7QUFDbkQsYUFBTyw4REFBUDtBQUNEOztBQUNELFdBQVEsb0JBQW1CLEtBQUtGLFFBQVMsc0JBQXpDO0FBQ0Q7O0FBckJ3Qzs7O0FBdUIzQ3JCLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZLElBQUllLGdCQUFKLENBQXFCLEtBQXJCLEVBQ1ZOLGNBQUtjLElBQUwsQ0FBVSxnQkFBVixFQUE0QnpCLHNCQUFPQyxTQUFQLEtBQXFCLFNBQXJCLEdBQWlDLEtBQTdELENBRFUsQ0FBWjtBQUVBSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJZSxnQkFBSixDQUFxQixTQUFyQixFQUNWTixjQUFLYyxJQUFMLENBQVUsT0FBVixFQUFtQnpCLHNCQUFPQyxTQUFQLEtBQXFCLGFBQXJCLEdBQXFDLFNBQXhELENBRFUsQ0FBWjtBQUVBSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJZSxnQkFBSixDQUFxQixVQUFyQixFQUNWTixjQUFLYyxJQUFMLENBQVUsT0FBVixFQUFtQnpCLHNCQUFPQyxTQUFQLEtBQXFCLGNBQXJCLEdBQXNDLFVBQXpELENBRFUsQ0FBWjtBQUVBSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJRSxlQUFKLEVBQVo7O0FBRUEsTUFBTXNCLHNCQUFOLFNBQXFDckIsbUJBQXJDLENBQWlEO0FBQy9DLFFBQU1DLFFBQU4sR0FBa0I7QUFDaEIsVUFBTXFCLGNBQWMsR0FBRyxNQUFNLGtDQUFzQixnQkFBdEIsQ0FBN0I7QUFDQSxXQUFPQSxjQUFjLEdBQ2pCLHVCQUFZLG1DQUFrQ0EsY0FBZSxFQUE3RCxDQURpQixHQUVqQix3QkFBWSxnQ0FBWixDQUZKO0FBR0Q7O0FBRUQsUUFBTVosR0FBTixHQUFhO0FBQ1gsV0FBTywySkFBUDtBQUNEOztBQVY4Qzs7O0FBWWpEakIsTUFBTSxDQUFDSSxJQUFQLENBQVksSUFBSXdCLHNCQUFKLEVBQVo7ZUFHZTVCLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb2N0b3JDaGVjayB9IGZyb20gJy4vZG9jdG9yJztcbmltcG9ydCB7IG9rLCBub2ssIG9rT3B0aW9uYWwsIG5va09wdGlvbmFsLCByZXNvbHZlRXhlY3V0YWJsZVBhdGggfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGZzLCBzeXN0ZW0gfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBFbnZWYXJBbmRQYXRoQ2hlY2sgZnJvbSAnLi9lbnYnO1xuXG5cbmxldCBjaGVja3MgPSBbXTtcblxubGV0IGphdmFIb21lID0gc3lzdGVtLmlzV2luZG93cygpID8gJyVKQVZBX0hPTUUlJyA6ICckSkFWQV9IT01FJztcblxuY2hlY2tzLnB1c2gobmV3IEVudlZhckFuZFBhdGhDaGVjaygnQU5EUk9JRF9IT01FJykpO1xuY2hlY2tzLnB1c2gobmV3IEVudlZhckFuZFBhdGhDaGVjaygnSkFWQV9IT01FJykpO1xuXG4vLyBDaGVjayB0aGF0IHRoZSBQQVRIIGluY2x1ZGVzIHRoZSBqZGsncyBiaW4gZGlyZWN0b3J5XG5jbGFzcyBKYXZhT25QYXRoQ2hlY2sgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGFzeW5jIGRpYWdub3NlICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgaWYgKHByb2Nlc3MuZW52LkpBVkFfSE9NRSkge1xuICAgICAgbGV0IGphdmFIb21lQmluID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuZW52LkpBVkFfSE9NRSwgJ2JpbicpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52LlBBVEguaW5kZXhPZihqYXZhSG9tZUJpbikgKyAxKSB7XG4gICAgICAgIHJldHVybiBvayhgQmluIGRpcmVjdG9yeSBvZiAke2phdmFIb21lfSBpcyBzZXRgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vayhgQmluIGRpcmVjdG9yeSBmb3IgJHtqYXZhSG9tZX0gaXMgbm90IHNldGApO1xuICB9XG5cbiAgZml4ICgpIHtcbiAgICByZXR1cm4gYEFkZCAnJHtqYXZhSG9tZX0ke3BhdGguc2VwfWJpbicgdG8geW91ciBQQVRIIGVudmlyb25tZW50YDtcbiAgfVxufVxuXG4vLyBDaGVjayB0b29sc1xuY2xhc3MgQW5kcm9pZFRvb2xDaGVjayBleHRlbmRzIERvY3RvckNoZWNrIHtcbiAgY29uc3RydWN0b3IgKHRvb2xOYW1lLCB0b29sUGF0aCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50b29sTmFtZSA9IHRvb2xOYW1lO1xuICAgIHRoaXMudG9vbFBhdGggPSB0b29sUGF0aDtcbiAgfVxuXG4gIGFzeW5jIGRpYWdub3NlICgpIHtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MuZW52LkFORFJPSURfSE9NRSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBub2soYCR7dGhpcy50b29sTmFtZX0gY291bGQgbm90IGJlIGZvdW5kIGJlY2F1c2UgQU5EUk9JRF9IT01FIGlzIE5PVCBzZXQhYCk7XG4gICAgfVxuICAgIGxldCBmdWxsUGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmVudi5BTkRST0lEX0hPTUUsIHRoaXMudG9vbFBhdGgpO1xuICAgIHJldHVybiBhd2FpdCBmcy5leGlzdHMoZnVsbFBhdGgpID8gb2soYCR7dGhpcy50b29sTmFtZX0gZXhpc3RzIGF0OiAke2Z1bGxQYXRofWApIDpcbiAgICAgIG5vayhgJHt0aGlzLnRvb2xOYW1lfSBjb3VsZCBOT1QgYmUgZm91bmQgYXQgJyR7ZnVsbFBhdGh9JyFgKTtcbiAgfVxuXG4gIGZpeCAoKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzLmVudi5BTkRST0lEX0hPTUUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gJ01hbnVhbGx5IGNvbmZpZ3VyZSBBTkRST0lEX0hPTUUgYW5kIHJ1biBhcHBpdW0tZG9jdG9yIGFnYWluLic7XG4gICAgfVxuICAgIHJldHVybiBgTWFudWFsbHkgaW5zdGFsbCAke3RoaXMudG9vbE5hbWV9IGFuZCBhZGQgaXQgdG8gUEFUSC5gO1xuICB9XG59XG5jaGVja3MucHVzaChuZXcgQW5kcm9pZFRvb2xDaGVjaygnYWRiJyxcbiAgcGF0aC5qb2luKCdwbGF0Zm9ybS10b29scycsIHN5c3RlbS5pc1dpbmRvd3MoKSA/ICdhZGIuZXhlJyA6ICdhZGInKSkpO1xuY2hlY2tzLnB1c2gobmV3IEFuZHJvaWRUb29sQ2hlY2soJ2FuZHJvaWQnLFxuICBwYXRoLmpvaW4oJ3Rvb2xzJywgc3lzdGVtLmlzV2luZG93cygpID8gJ2FuZHJvaWQuYmF0JyA6ICdhbmRyb2lkJykpKTtcbmNoZWNrcy5wdXNoKG5ldyBBbmRyb2lkVG9vbENoZWNrKCdlbXVsYXRvcicsXG4gIHBhdGguam9pbigndG9vbHMnLCBzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnZW11bGF0b3IuZXhlJyA6ICdlbXVsYXRvcicpKSk7XG5jaGVja3MucHVzaChuZXcgSmF2YU9uUGF0aENoZWNrKCkpO1xuXG5jbGFzcyBPcHRpb25hbEFwcEJ1bmRsZUNoZWNrIGV4dGVuZHMgRG9jdG9yQ2hlY2sge1xuICBhc3luYyBkaWFnbm9zZSAoKSB7XG4gICAgY29uc3QgYnVuZGxldG9vbFBhdGggPSBhd2FpdCByZXNvbHZlRXhlY3V0YWJsZVBhdGgoJ2J1bmRsZXRvb2wuamFyJyk7XG4gICAgcmV0dXJuIGJ1bmRsZXRvb2xQYXRoXG4gICAgICA/IG9rT3B0aW9uYWwoYGJ1bmRsZXRvb2wuamFyIGlzIGluc3RhbGxlZCBhdDogJHtidW5kbGV0b29sUGF0aH1gKVxuICAgICAgOiBub2tPcHRpb25hbCgnYnVuZGxldG9vbC5qYXIgY2Fubm90IGJlIGZvdW5kJyk7XG4gIH1cblxuICBhc3luYyBmaXggKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICByZXR1cm4gJ2J1bmRsZXRvb2wuamFyIGlzIHVzZWQgdG8gaGFuZGxlIEFuZHJvaWQgQXBwIEJ1bmRsZS4gUGxlYXNlIHJlYWQgaHR0cDovL2FwcGl1bS5pby9kb2NzL2VuL3dyaXRpbmctcnVubmluZy1hcHBpdW0vYW5kcm9pZC9hbmRyb2lkLWFwcGJ1bmRsZS8gdG8gaW5zdGFsbCBpdCc7XG4gIH1cbn1cbmNoZWNrcy5wdXNoKG5ldyBPcHRpb25hbEFwcEJ1bmRsZUNoZWNrKCkpO1xuXG5leHBvcnQgeyBFbnZWYXJBbmRQYXRoQ2hlY2ssIEFuZHJvaWRUb29sQ2hlY2ssIEphdmFPblBhdGhDaGVjaywgT3B0aW9uYWxBcHBCdW5kbGVDaGVjayB9O1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tzO1xuIl0sImZpbGUiOiJsaWIvYW5kcm9pZC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
