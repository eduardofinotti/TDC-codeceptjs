"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FileCheck = exports.DirCheck = void 0;

require("source-map-support/register");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _doctor = require("./doctor");

var _logger = _interopRequireDefault(require("./logger"));

var _prompt = require("./prompt");

let checks = [];

class DirCheck extends _doctor.DoctorCheck {
  constructor(path) {
    super({
      autofix: false
    });
    this.path = path;
  }

  async diagnose() {
    if (!(await _appiumSupport.fs.exists(this.path))) {
      return (0, _utils.nok)(`Could NOT find directory at '${this.path}'!`);
    }

    let stats = await _appiumSupport.fs.lstat(this.path);
    return stats.isDirectory() ? (0, _utils.ok)(`Found directory at: ${this.path}`) : (0, _utils.nok)(`'${this.path}' is NOT a directory!`);
  }

  async fix() {
    return `Manually create a directory at: ${this.path}`;
  }

}

exports.DirCheck = DirCheck;
checks.push(new DirCheck('/tmp/appium-doctor'));
checks.push(new DirCheck('/tmp/appium-doctor/demo'));

class FileCheck extends _doctor.DoctorCheck {
  constructor(path) {
    super({
      autofix: true
    });
    this.path = path;
  }

  async diagnose() {
    return (await _appiumSupport.fs.exists(this.path)) ? (0, _utils.ok)(`Found file at: ${this.path}`) : (0, _utils.nok)(`Could NOT find file at '${this.path}'!`);
  }

  async fix() {
    _logger.default.info(`The following command need be executed: touch '${this.path}'`);

    let yesno = await (0, _prompt.fixIt)();

    if (yesno === 'yes') {
      await (0, _teen_process.exec)('touch', [this.path]);
    } else {
      _logger.default.info(`Skipping you will need to touch '${this.path}' manually.`);

      throw new _doctor.FixSkippedError('bbb');
    }
  }

}

exports.FileCheck = FileCheck;
checks.push(new FileCheck('/tmp/appium-doctor/demo/apple.fruit'));
checks.push(new FileCheck('/tmp/appium-doctor/demo/pear.fruit'));
checks.push(new FileCheck('/tmp/appium-doctor/demo/orange.fruit'));
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZW1vLmpzIl0sIm5hbWVzIjpbImNoZWNrcyIsIkRpckNoZWNrIiwiRG9jdG9yQ2hlY2siLCJjb25zdHJ1Y3RvciIsInBhdGgiLCJhdXRvZml4IiwiZGlhZ25vc2UiLCJmcyIsImV4aXN0cyIsInN0YXRzIiwibHN0YXQiLCJpc0RpcmVjdG9yeSIsImZpeCIsInB1c2giLCJGaWxlQ2hlY2siLCJsb2ciLCJpbmZvIiwieWVzbm8iLCJGaXhTa2lwcGVkRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBSUEsTUFBTSxHQUFHLEVBQWI7O0FBRUEsTUFBTUMsUUFBTixTQUF1QkMsbUJBQXZCLENBQW1DO0FBQ2pDQyxFQUFBQSxXQUFXLENBQUVDLElBQUYsRUFBUTtBQUNqQixVQUFNO0FBQUNDLE1BQUFBLE9BQU8sRUFBRTtBQUFWLEtBQU47QUFDQSxTQUFLRCxJQUFMLEdBQVlBLElBQVo7QUFDRDs7QUFFRCxRQUFNRSxRQUFOLEdBQWtCO0FBQ2hCLFFBQUksRUFBQyxNQUFNQyxrQkFBR0MsTUFBSCxDQUFVLEtBQUtKLElBQWYsQ0FBUCxDQUFKLEVBQWlDO0FBQy9CLGFBQU8sZ0JBQUssZ0NBQStCLEtBQUtBLElBQUssSUFBOUMsQ0FBUDtBQUNEOztBQUNELFFBQUlLLEtBQUssR0FBRyxNQUFNRixrQkFBR0csS0FBSCxDQUFTLEtBQUtOLElBQWQsQ0FBbEI7QUFDQSxXQUFPSyxLQUFLLENBQUNFLFdBQU4sS0FDTCxlQUFJLHVCQUFzQixLQUFLUCxJQUFLLEVBQXBDLENBREssR0FDb0MsZ0JBQUssSUFBRyxLQUFLQSxJQUFLLHVCQUFsQixDQUQzQztBQUVEOztBQUVELFFBQU1RLEdBQU4sR0FBYTtBQUNYLFdBQVEsbUNBQWtDLEtBQUtSLElBQUssRUFBcEQ7QUFDRDs7QUFqQmdDOzs7QUFvQm5DSixNQUFNLENBQUNhLElBQVAsQ0FBWSxJQUFJWixRQUFKLENBQWEsb0JBQWIsQ0FBWjtBQUNBRCxNQUFNLENBQUNhLElBQVAsQ0FBWSxJQUFJWixRQUFKLENBQWEseUJBQWIsQ0FBWjs7QUFFQSxNQUFNYSxTQUFOLFNBQXdCWixtQkFBeEIsQ0FBb0M7QUFDbENDLEVBQUFBLFdBQVcsQ0FBRUMsSUFBRixFQUFRO0FBQ2pCLFVBQU07QUFBQ0MsTUFBQUEsT0FBTyxFQUFFO0FBQVYsS0FBTjtBQUNBLFNBQUtELElBQUwsR0FBWUEsSUFBWjtBQUNEOztBQUVELFFBQU1FLFFBQU4sR0FBa0I7QUFDaEIsV0FBTyxPQUFNQyxrQkFBR0MsTUFBSCxDQUFVLEtBQUtKLElBQWYsQ0FBTixJQUNMLGVBQUksa0JBQWlCLEtBQUtBLElBQUssRUFBL0IsQ0FESyxHQUMrQixnQkFBSywyQkFBMEIsS0FBS0EsSUFBSyxJQUF6QyxDQUR0QztBQUVEOztBQUVELFFBQU1RLEdBQU4sR0FBYTtBQUNYRyxvQkFBSUMsSUFBSixDQUFVLGtEQUFpRCxLQUFLWixJQUFLLEdBQXJFOztBQUNBLFFBQUlhLEtBQUssR0FBRyxNQUFNLG9CQUFsQjs7QUFDQSxRQUFJQSxLQUFLLEtBQUssS0FBZCxFQUFxQjtBQUNuQixZQUFNLHdCQUFLLE9BQUwsRUFBYyxDQUFDLEtBQUtiLElBQU4sQ0FBZCxDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0xXLHNCQUFJQyxJQUFKLENBQVUsb0NBQW1DLEtBQUtaLElBQUssYUFBdkQ7O0FBQ0EsWUFBTSxJQUFJYyx1QkFBSixDQUFvQixLQUFwQixDQUFOO0FBQ0Q7QUFDRjs7QUFwQmlDOzs7QUF1QnBDbEIsTUFBTSxDQUFDYSxJQUFQLENBQVksSUFBSUMsU0FBSixDQUFjLHFDQUFkLENBQVo7QUFDQWQsTUFBTSxDQUFDYSxJQUFQLENBQVksSUFBSUMsU0FBSixDQUFjLG9DQUFkLENBQVo7QUFDQWQsTUFBTSxDQUFDYSxJQUFQLENBQVksSUFBSUMsU0FBSixDQUFjLHNDQUFkLENBQVo7ZUFHZWQsTSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGRlbW8gcnVsZSB0byB0ZXN0IHRoZSBndWlcblxuaW1wb3J0IHsgb2ssIG5vayB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IERvY3RvckNoZWNrLCBGaXhTa2lwcGVkRXJyb3IgfSBmcm9tICcuL2RvY3Rvcic7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGZpeEl0IH0gZnJvbSAnLi9wcm9tcHQnO1xuXG5cbmxldCBjaGVja3MgPSBbXTtcblxuY2xhc3MgRGlyQ2hlY2sgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGNvbnN0cnVjdG9yIChwYXRoKSB7XG4gICAgc3VwZXIoe2F1dG9maXg6IGZhbHNlfSk7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxuXG4gIGFzeW5jIGRpYWdub3NlICgpIHtcbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyh0aGlzLnBhdGgpKSB7XG4gICAgICByZXR1cm4gbm9rKGBDb3VsZCBOT1QgZmluZCBkaXJlY3RvcnkgYXQgJyR7dGhpcy5wYXRofSchYCk7XG4gICAgfVxuICAgIGxldCBzdGF0cyA9IGF3YWl0IGZzLmxzdGF0KHRoaXMucGF0aCk7XG4gICAgcmV0dXJuIHN0YXRzLmlzRGlyZWN0b3J5KCkgP1xuICAgICAgb2soYEZvdW5kIGRpcmVjdG9yeSBhdDogJHt0aGlzLnBhdGh9YCkgOiBub2soYCcke3RoaXMucGF0aH0nIGlzIE5PVCBhIGRpcmVjdG9yeSFgKTtcbiAgfVxuXG4gIGFzeW5jIGZpeCAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHJldHVybiBgTWFudWFsbHkgY3JlYXRlIGEgZGlyZWN0b3J5IGF0OiAke3RoaXMucGF0aH1gO1xuICB9XG59XG5cbmNoZWNrcy5wdXNoKG5ldyBEaXJDaGVjaygnL3RtcC9hcHBpdW0tZG9jdG9yJykpO1xuY2hlY2tzLnB1c2gobmV3IERpckNoZWNrKCcvdG1wL2FwcGl1bS1kb2N0b3IvZGVtbycpKTtcblxuY2xhc3MgRmlsZUNoZWNrIGV4dGVuZHMgRG9jdG9yQ2hlY2sge1xuICBjb25zdHJ1Y3RvciAocGF0aCkge1xuICAgIHN1cGVyKHthdXRvZml4OiB0cnVlfSk7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxuXG4gIGFzeW5jIGRpYWdub3NlICgpIHtcbiAgICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKHRoaXMucGF0aCkgP1xuICAgICAgb2soYEZvdW5kIGZpbGUgYXQ6ICR7dGhpcy5wYXRofWApIDogbm9rKGBDb3VsZCBOT1QgZmluZCBmaWxlIGF0ICcke3RoaXMucGF0aH0nIWApO1xuICB9XG5cbiAgYXN5bmMgZml4ICgpIHtcbiAgICBsb2cuaW5mbyhgVGhlIGZvbGxvd2luZyBjb21tYW5kIG5lZWQgYmUgZXhlY3V0ZWQ6IHRvdWNoICcke3RoaXMucGF0aH0nYCk7XG4gICAgbGV0IHllc25vID0gYXdhaXQgZml4SXQoKTtcbiAgICBpZiAoeWVzbm8gPT09ICd5ZXMnKSB7XG4gICAgICBhd2FpdCBleGVjKCd0b3VjaCcsIFt0aGlzLnBhdGhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmluZm8oYFNraXBwaW5nIHlvdSB3aWxsIG5lZWQgdG8gdG91Y2ggJyR7dGhpcy5wYXRofScgbWFudWFsbHkuYCk7XG4gICAgICB0aHJvdyBuZXcgRml4U2tpcHBlZEVycm9yKCdiYmInKTtcbiAgICB9XG4gIH1cbn1cblxuY2hlY2tzLnB1c2gobmV3IEZpbGVDaGVjaygnL3RtcC9hcHBpdW0tZG9jdG9yL2RlbW8vYXBwbGUuZnJ1aXQnKSk7XG5jaGVja3MucHVzaChuZXcgRmlsZUNoZWNrKCcvdG1wL2FwcGl1bS1kb2N0b3IvZGVtby9wZWFyLmZydWl0JykpO1xuY2hlY2tzLnB1c2gobmV3IEZpbGVDaGVjaygnL3RtcC9hcHBpdW0tZG9jdG9yL2RlbW8vb3JhbmdlLmZydWl0JykpO1xuXG5leHBvcnQgeyBEaXJDaGVjaywgRmlsZUNoZWNrIH07XG5leHBvcnQgZGVmYXVsdCBjaGVja3M7XG4iXSwiZmlsZSI6ImxpYi9kZW1vLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
