"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _utils = require("./utils");

const NODE_COMMON_PATHS = [process.env.NODE_BIN, '/usr/local/bin/node', '/opt/local/bin/node'];

class NodeDetector {
  static async retrieveInCommonPlaces() {
    for (let p of NODE_COMMON_PATHS) {
      if (p && (await _appiumSupport.fs.exists(p))) {
        _logger.default.debug(`Node binary found at common place: ${p}`);

        return p;
      }
    }

    _logger.default.debug('Node binary wasn\'t found at common places.');

    return null;
  }

  static async retrieveUsingSystemCall() {
    const nodePath = await (0, _utils.resolveExecutablePath)('node');

    if (!nodePath) {
      _logger.default.debug(`Node binary not found in PATH: ${process.env.PATH}`);

      return null;
    }

    _logger.default.debug(`Node binary found at: ${nodePath}`);

    return nodePath;
  }

  static async retrieveUsingAppleScript() {
    if (!_appiumSupport.system.isMac()) {
      _logger.default.debug('Not on Darwin, skipping Apple Script');

      return null;
    }

    const appScript = ['try', '  set appiumIsRunning to false', '  tell application "System Events"', '    set appiumIsRunning to name of every process contains "Appium"', '  end tell', '  if appiumIsRunning then', '    tell application "Appium" to return node path', '  end if', 'end try', 'return "NULL"'].join('\n');
    let stdout;

    try {
      stdout = (await (0, _teen_process.exec)('osascript', ['-e', appScript])).stdout;
    } catch (err) {
      _logger.default.debug(err);

      return null;
    }

    let nodePath = stdout.replace('\n', '');

    if (await _appiumSupport.fs.exists(nodePath)) {
      _logger.default.debug(`Node binary found using AppleScript at: ${nodePath}`);

      return nodePath;
    } else {
      _logger.default.debug('Node binary not found using AppleScript.');

      return null;
    }
  }

  static async retrieveUsingAppiumConfigFile() {
    let jsonobj;

    try {
      const appiumConfigPath = _path.default.resolve(__dirname, '..', '..', '.appiumconfig.json');

      if (await _appiumSupport.fs.exists(appiumConfigPath)) {
        jsonobj = JSON.parse((await _appiumSupport.fs.readFile(appiumConfigPath, 'utf8')));
      }
    } catch (err) {
      _logger.default.debug(err);

      return null;
    }

    if (jsonobj && jsonobj.node_bin && (await _appiumSupport.fs.exists(jsonobj.node_bin))) {
      _logger.default.debug(`Node binary found using .appiumconfig.json at: ${jsonobj.node_bin}`);

      return jsonobj.node_bin;
    } else {
      _logger.default.debug('Node binary not found in the .appiumconfig.json file.');

      return null;
    }
  }

  static async detect() {
    let nodePath = (await NodeDetector.retrieveUsingSystemCall()) || (await NodeDetector.retrieveInCommonPlaces()) || (await NodeDetector.retrieveUsingAppleScript()) || (await NodeDetector.retrieveUsingAppiumConfigFile());

    if (nodePath) {
      return nodePath;
    } else {
      _logger.default.warn('The node binary could not be found.');

      return null;
    }
  }

}

var _default = NodeDetector;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
